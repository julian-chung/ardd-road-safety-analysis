[
  {
    "objectID": "notebooks/0-eda-australian-road-fatalities.html",
    "href": "notebooks/0-eda-australian-road-fatalities.html",
    "title": "Analysis of Fatal Road Accidents in Australia since 1989",
    "section": "",
    "text": "This project explores fatal road transport accidents in Australia from 1989. Using data sourced from the Australian Road Deaths Database (ARDD), the analysis examines the demographic, geographic, and temporal distribution of fatal accidents.\nThe key objectives of this analysis are to:\n\nIdentify the demographic groups most affected by fatal road accidents\nExamine how fatalities are distributed across Australian states and territories\nExplore patterns in accident timing (days of the week, months of the year)\nAnalyze trends over time in road fatalities overall and among vulnerable road users (pedestrians, cyclists)\nThe analysis applies data cleaning, missing value handling, and exploratory data visualization techniques to highlight significant trends and support future road safety research efforts."
  },
  {
    "objectID": "notebooks/0-eda-australian-road-fatalities.html#introduction",
    "href": "notebooks/0-eda-australian-road-fatalities.html#introduction",
    "title": "Analysis of Fatal Road Accidents in Australia since 1989",
    "section": "",
    "text": "This project explores fatal road transport accidents in Australia from 1989. Using data sourced from the Australian Road Deaths Database (ARDD), the analysis examines the demographic, geographic, and temporal distribution of fatal accidents.\nThe key objectives of this analysis are to:\n\nIdentify the demographic groups most affected by fatal road accidents\nExamine how fatalities are distributed across Australian states and territories\nExplore patterns in accident timing (days of the week, months of the year)\nAnalyze trends over time in road fatalities overall and among vulnerable road users (pedestrians, cyclists)\nThe analysis applies data cleaning, missing value handling, and exploratory data visualization techniques to highlight significant trends and support future road safety research efforts."
  },
  {
    "objectID": "notebooks/0-eda-australian-road-fatalities.html#key-findings",
    "href": "notebooks/0-eda-australian-road-fatalities.html#key-findings",
    "title": "Analysis of Fatal Road Accidents in Australia since 1989",
    "section": "Key Findings",
    "text": "Key Findings\n\nRoad fatalities have steadily declined from 1989 to 2021, both in raw numbers and when adjusted per 100,000 population.\nYoung drivers (aged 17–25) historically had the highest fatality rates but have seen substantial improvements, likely due to licensing restrictions.\nMales account for approximately 70% of all road fatalities, a ratio that has remained consistent over time.\nThe majority of fatal accidents occur between Friday and Sunday, with Friday afternoon being the most dangerous time period.\nNew South Wales, Victoria, and Queensland account for more than 80% of all fatalities.\nPedestrian fatalities have decreased over time, but cyclist fatalities have remained relatively constant since the mid-1990s."
  },
  {
    "objectID": "notebooks/0-eda-australian-road-fatalities.html#reading-data-and-importing-libraries",
    "href": "notebooks/0-eda-australian-road-fatalities.html#reading-data-and-importing-libraries",
    "title": "Analysis of Fatal Road Accidents in Australia since 1989",
    "section": "1.1 Reading Data and Importing Libraries",
    "text": "1.1 Reading Data and Importing Libraries\nImport the necessary libraries and read the dataset into a pandas DataFrame. The dataset is in CSV format and contains information about fatal road accidents in Australia from 1989. The dataset is updated monthly and includes various attributes such as the date of the accident, location, vehicle type, and demographic information about the individuals involved in the accidents.\n\n\nCode\n# Set the directory for the script\n\nimport sys\nsys.path.append(\"../scripts\") \n\n# Importing the required libraries\n\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display\n\n# Using Pandas to read the csv file and store it in a dataframe\n\ndf = pd.read_csv(\"../data/Crash_Data.csv\", low_memory=False)"
  },
  {
    "objectID": "notebooks/0-eda-australian-road-fatalities.html#exploring-the-data-and-checking-the-data-types",
    "href": "notebooks/0-eda-australian-road-fatalities.html#exploring-the-data-and-checking-the-data-types",
    "title": "Analysis of Fatal Road Accidents in Australia since 1989",
    "section": "1.2 Exploring the Data and Checking the Data Types",
    "text": "1.2 Exploring the Data and Checking the Data Types\nBriefly inspect to check column names, types, summary statistics, and overall structure.\n\n\nCode\n# View the first and last five rows of the dataset\n\ndisplay(df.head())\ndisplay(df.tail())\n\n\n\n\n\n\n\n\n\nCrash ID\nState\nMonth\nYear\nDayweek\nTime\nCrash Type\nBus Involvement\nHeavy Rigid Truck Involvement\nArticulated Truck Involvement\n...\nAge\nNational Remoteness Areas\nSA4 Name 2016\nNational LGA Name 2017\nNational Road Type\nChristmas Period\nEaster Period\nAge Group\nDay of week\nTime of day\n\n\n\n\n0\n20212133\nVic\n9\n2021\nSunday\n0:30\nSingle\nNaN\nNaN\nNaN\n...\n38\nInner Regional Australia\nMelbourne - Outer East\nYarra Ranges (S)\nArterial Road\nNo\nNo\n26_to_39\nWeekend\nNight\n\n\n1\n20214022\nSA\n9\n2021\nSaturday\n23:31\nMultiple\nNo\nNo\nNo\n...\n28\nMajor Cities of Australia\nAdelaide - North\nPlayford (C)\nNaN\nNo\nNo\n26_to_39\nWeekend\nNight\n\n\n2\n20212096\nVic\n9\n2021\nSaturday\n23:00\nSingle\nNaN\nNaN\nNaN\n...\n19\nInner Regional Australia\nHume\nWangaratta (RC)\nAccess road\nNo\nNo\n17_to_25\nWeekend\nNight\n\n\n3\n20212145\nVic\n9\n2021\nSaturday\n22:25\nSingle\nNaN\nNaN\nNaN\n...\n23\nOuter Regional Australia\nHume\nWangaratta (RC)\nArterial Road\nNo\nNo\n17_to_25\nWeekend\nNight\n\n\n4\n20212075\nVic\n9\n2021\nSaturday\n5:15\nSingle\nNaN\nNaN\nNaN\n...\n46\nMajor Cities of Australia\nMelbourne - South East\nCasey (C)\nLocal Road\nNo\nNo\n40_to_64\nWeekend\nNight\n\n\n\n\n5 rows × 23 columns\n\n\n\n\n\n\n\n\n\n\nCrash ID\nState\nMonth\nYear\nDayweek\nTime\nCrash Type\nBus Involvement\nHeavy Rigid Truck Involvement\nArticulated Truck Involvement\n...\nAge\nNational Remoteness Areas\nSA4 Name 2016\nNational LGA Name 2017\nNational Road Type\nChristmas Period\nEaster Period\nAge Group\nDay of week\nTime of day\n\n\n\n\n52838\n19891246\nNSW\n1\n1989\nWednesday\n17:05\nSingle\nYes\nNaN\nNo\n...\n5\nNaN\nNaN\nNaN\nNaN\nNo\nNo\n0_to_16\nWeekday\nDay\n\n\n52839\n19895088\nWA\n1\n1989\nMonday\n6:00\nSingle\nNo\nNaN\nNo\n...\n19\nNaN\nNaN\nNaN\nNaN\nYes\nNo\n17_to_25\nWeekday\nDay\n\n\n52840\n19895088\nWA\n1\n1989\nMonday\n6:00\nSingle\nNo\nNaN\nNo\n...\n17\nNaN\nNaN\nNaN\nNaN\nYes\nNo\n17_to_25\nWeekday\nDay\n\n\n52841\n19895088\nWA\n1\n1989\nMonday\n6:00\nSingle\nNo\nNaN\nNo\n...\n17\nNaN\nNaN\nNaN\nNaN\nYes\nNo\n17_to_25\nWeekday\nDay\n\n\n52842\n19896063\nTas\n1\n1989\nTuesday\n12:40\nMultiple\nNo\nNaN\nNo\n...\n63\nNaN\nNaN\nNaN\nNaN\nNo\nNo\n40_to_64\nWeekday\nDay\n\n\n\n\n5 rows × 23 columns\n\n\n\n\n\nCode\n# Get information about the dataset\ndisplay(df.info())\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 52843 entries, 0 to 52842\nData columns (total 23 columns):\n #   Column                         Non-Null Count  Dtype \n---  ------                         --------------  ----- \n 0   Crash ID                       52843 non-null  int64 \n 1   State                          52843 non-null  object\n 2   Month                          52843 non-null  int64 \n 3   Year                           52843 non-null  int64 \n 4   Dayweek                        52843 non-null  object\n 5   Time                           52803 non-null  object\n 6   Crash Type                     52843 non-null  object\n 7   Bus Involvement                52821 non-null  object\n 8   Heavy Rigid Truck Involvement  32328 non-null  object\n 9   Articulated Truck Involvement  52821 non-null  object\n 10  Speed Limit                    52141 non-null  object\n 11  Road User                      52843 non-null  object\n 12  Gender                         52816 non-null  object\n 13  Age                            52843 non-null  int64 \n 14  National Remoteness Areas      6878 non-null   object\n 15  SA4 Name 2016                  6892 non-null   object\n 16  National LGA Name 2017         6893 non-null   object\n 17  National Road Type             6877 non-null   object\n 18  Christmas Period               52843 non-null  object\n 19  Easter Period                  52843 non-null  object\n 20  Age Group                      52753 non-null  object\n 21  Day of week                    52843 non-null  object\n 22  Time of day                    52843 non-null  object\ndtypes: int64(4), object(19)\nmemory usage: 9.3+ MB\n\n\nNone\n\n\n\n\nCode\n# Take the number of rows and columns in the dataset, and the number of unique Crash ID's, and print them out in a sentence. \n\nprint(f\"Dataset contains {df.shape[0]:,} rows and {df.shape[1]} columns, \"f\"with {df['Crash ID'].nunique():,} unique crash IDs.\")\n\n\nDataset contains 52,843 rows and 23 columns, with 47,567 unique crash IDs.\n\n\nThe table below provides a high-level summary of each column, including: - The number of unique values - The most frequently occurring value (where applicable) - The count of that most common value - The number of missing entries\nNote: For identifier fields like Crash ID, the “top value” has limited interpretive value, but is more informative in fields such as State or Age.\n\n\nCode\n# Creating and populating a summary dataframe using pandas\nsummary_df = pd.DataFrame({\n    'Column Name': df.columns, # Getting the column names\n    'Unique Values': [df[col].nunique() for col in df.columns], # Counting the number of unique values in each column\n    'Most Common Value': [df[col].mode()[0] for col in df.columns], # Finding the most common value in each column using mode function\n    'Count of Most Common Value': [df[col].value_counts().iloc[0] for col in df.columns], # Counting the number of times the most common value appears in each column\n    'Missing Values': df.isnull().sum().values # Counting the number of blank values in each column\n})\n\n# Displaying the summary dataframe\ndisplay(summary_df)\n\n\n\n\n\n\n\n\n\nColumn Name\nUnique Values\nMost Common Value\nCount of Most Common Value\nMissing Values\n\n\n\n\n0\nCrash ID\n47567\n19891474\n35\n0\n\n\n1\nState\n8\nNSW\n16293\n0\n\n\n2\nMonth\n12\n12\n4721\n0\n\n\n3\nYear\n33\n1989\n2800\n0\n\n\n4\nDayweek\n7\nSaturday\n9696\n0\n\n\n5\nTime\n1413\n15:00\n1144\n40\n\n\n6\nCrash Type\n2\nSingle\n29249\n0\n\n\n7\nBus Involvement\n2\nNo\n51835\n22\n\n\n8\nHeavy Rigid Truck Involvement\n2\nNo\n30735\n20515\n\n\n9\nArticulated Truck Involvement\n2\nNo\n47476\n22\n\n\n10\nSpeed Limit\n19\n100\n18248\n702\n\n\n11\nRoad User\n7\nDriver\n23816\n0\n\n\n12\nGender\n3\nMale\n37813\n27\n\n\n13\nAge\n103\n18\n1953\n0\n\n\n14\nNational Remoteness Areas\n5\nMajor Cities of Australia\n2370\n45965\n\n\n15\nSA4 Name 2016\n88\nWestern Australia - Wheat Belt\n230\n45951\n\n\n16\nNational LGA Name 2017\n500\nCentral Coast\n91\n45950\n\n\n17\nNational Road Type\n13\nNational or State Highway\n1863\n45966\n\n\n18\nChristmas Period\n2\nNo\n51208\n0\n\n\n19\nEaster Period\n2\nNo\n52573\n0\n\n\n20\nAge Group\n6\n17_to_25\n13771\n90\n\n\n21\nDay of week\n2\nWeekday\n31066\n0\n\n\n22\nTime of day\n2\nDay\n30117\n0\n\n\n\n\n\n\n\nThe summary table above shows the column names, the number of unique values in each column, the most common value in each column and the number of times the most common value appears. From the data we can see that the there are 47567 crashes in the dataset that contains 52843 fatalities, the most deadly accident on record involved 35 fatalities (Kempsey Bus Crash 1989), and the most common gender is Male.\n\n\nCode\n# Calculate statistics for the 'Age' column\n\nmean_age = df['Age'].mean()\nmedian_age = df['Age'].median()\nmin_age = df['Age'].min()\nmax_age = df['Age'].max()\n\nprint(f\"The average age of individuals involved in fatal road crashes was {mean_age:.1f} years \"f\"(median: {median_age}, range: {min_age}–{max_age}).\")\n\n\nThe average age of individuals involved in fatal road crashes was 39.7 years (median: 34.0, range: -9–101)."
  },
  {
    "objectID": "notebooks/0-eda-australian-road-fatalities.html#checking-for-null-or-missing-values",
    "href": "notebooks/0-eda-australian-road-fatalities.html#checking-for-null-or-missing-values",
    "title": "Analysis of Fatal Road Accidents in Australia since 1989",
    "section": "2.1 Checking for null or missing values",
    "text": "2.1 Checking for null or missing values\nFrom information provided in the ARDD data dictionary we know that missing values are represented by ‘-9’, ‘Unspecified’ or ‘Other/-9’. We will search for these values and replace them with null values (NaN).\n\n\nCode\n# Firstly, we will find the number of blank values in the dataset\nblank_values = df.isnull().sum()\n\n# Secondly, we will find the number of values set to '-9' which according to the data book are also missing data. \nneg_nine_values = df.isin([-9, 'Other/-9']).sum()\n\n# Thirdly there are a handful of 'Unspecified' value in the dataset, so we will also sum them\nunspecified_values = (df == \"Unspecified\").sum()\n\n# We will now sum all the missing values\ntotal_missing = blank_values + neg_nine_values + unspecified_values\n\n# Displaying counts of blank, '-9', 'unspecified', and total missing values per column\n\nmissing_data_summary = pd.DataFrame({\n    'Blank Values': blank_values,\n    '-9 Values': neg_nine_values,\n    'Unspecified Values': unspecified_values,\n    'Total of Missing Values': total_missing\n})\n\ndisplay(missing_data_summary)\n\n\n\n\n\n\n\n\n\nBlank Values\n-9 Values\nUnspecified Values\nTotal of Missing Values\n\n\n\n\nCrash ID\n0\n0\n0\n0\n\n\nState\n0\n0\n0\n0\n\n\nMonth\n0\n0\n0\n0\n\n\nYear\n0\n0\n0\n0\n\n\nDayweek\n0\n0\n0\n0\n\n\nTime\n40\n0\n0\n40\n\n\nCrash Type\n0\n0\n0\n0\n\n\nBus Involvement\n22\n0\n0\n22\n\n\nHeavy Rigid Truck Involvement\n20515\n0\n0\n20515\n\n\nArticulated Truck Involvement\n22\n0\n0\n22\n\n\nSpeed Limit\n702\n0\n2\n704\n\n\nRoad User\n0\n92\n0\n92\n\n\nGender\n27\n0\n1\n28\n\n\nAge\n0\n90\n0\n90\n\n\nNational Remoteness Areas\n45965\n0\n0\n45965\n\n\nSA4 Name 2016\n45951\n0\n0\n45951\n\n\nNational LGA Name 2017\n45950\n0\n0\n45950\n\n\nNational Road Type\n45966\n0\n0\n45966\n\n\nChristmas Period\n0\n0\n0\n0\n\n\nEaster Period\n0\n0\n0\n0\n\n\nAge Group\n90\n0\n0\n90\n\n\nDay of week\n0\n0\n0\n0\n\n\nTime of day\n0\n0\n0\n0\n\n\n\n\n\n\n\nNull or missing values will be replaced with NaN for easier analysis and columns with high proportions of missing data will be dropped from further analysis to ensure data quality and avoid skewed interpretations.\nHeavy Rigid Truck Involvement, National Remoteness Areas, SA4 Name 2016, National LGA Name 2017, and National Road Type will be dropped."
  },
  {
    "objectID": "notebooks/0-eda-australian-road-fatalities.html#data-cleaning",
    "href": "notebooks/0-eda-australian-road-fatalities.html#data-cleaning",
    "title": "Analysis of Fatal Road Accidents in Australia since 1989",
    "section": "2.2 Data Cleaning",
    "text": "2.2 Data Cleaning\nData is cleaned using a script that: - Replaces missing values with NaN. - Map numeric month values to month names and create a new column for month names. - Drops columns with high proportions of missing data. - Drops entries from the current year as that data is not yet complete.\n\n\nCode\nfrom data_cleaning import full_clean_pipeline\n\ndf = full_clean_pipeline()\n\n# Create a dynamic year variable to get the latest year in the dataset to use in the analysis\nlatest_year = df['Year'].max()\nearliest_year = df['Year'].min()\nprint(f\"The dataset contains data from {earliest_year} to {latest_year}.\")\n\n\nThe dataset contains data from 1989 to 2021."
  },
  {
    "objectID": "notebooks/0-eda-australian-road-fatalities.html#visualise-the-remaining-missing-data",
    "href": "notebooks/0-eda-australian-road-fatalities.html#visualise-the-remaining-missing-data",
    "title": "Analysis of Fatal Road Accidents in Australia since 1989",
    "section": "2.3 Visualise the Remaining Missing Data",
    "text": "2.3 Visualise the Remaining Missing Data\nA quick visualisation of the remaining missing data will be created to help identify any remaining issues.\n\n\nCode\n# Creating a bar chart of the missing data\nsns.set_style('whitegrid')\nmissing_value_count = df.isnull().sum() # We could instead call on the missing_data_summary dataframe using the 'total_missing' column, but defining a new variable is easier to read and shorter to type\nplt.figure(figsize=(16,8))\nsns.barplot(x=missing_value_count.index, \n            y=missing_value_count)\nplt.title('Count of Missing Values per Column')\nplt.xlabel('Column Name')\nplt.ylabel('Count of missing values')\nplt.xticks(rotation=90)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above chart shows the count of missing values, however since some of these numbers are a very small portion of the data, it is difficult to see the distribution of missing values. Therefore, we will create a bar chart of the percentage of missing values per column and set the range on the y-axis to 0-10%.\n\n\nCode\n# Creating a bar chart of the percentage of missing data\nsns.set_style('whitegrid')\nmissing_values_percentage = (missing_value_count / len(df)) * 100\nplt.figure(figsize=(16,8))\nsns.barplot(x=missing_values_percentage.index, \n            y=missing_values_percentage)\nplt.title('Percentage of Missing Values per Column')\nplt.xlabel('Column Name')\nplt.ylabel('Percentage of missing values (0 to 10%)')\nplt.xticks(rotation=90)\nplt.yticks(range(0, 11, 1))\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above chart shows the percentage of missing values per column, with the Y-axis set to a range of 0 to 10%. Speed limit has the highest percentage of missing values at 2.6%. The remaining columns have a very low percentage of missing values, with the majority of columns having less than 0.5% missing values. These values will not be dropped from the main dataset, however when creating visualisations we may need to create new dataframes that drop rows with missing values."
  },
  {
    "objectID": "notebooks/0-eda-australian-road-fatalities.html#check-for-duplicate-entries",
    "href": "notebooks/0-eda-australian-road-fatalities.html#check-for-duplicate-entries",
    "title": "Analysis of Fatal Road Accidents in Australia since 1989",
    "section": "2.4 Check for Duplicate Entries",
    "text": "2.4 Check for Duplicate Entries\n\n\nCode\n# Checking for duplicate rows\nduplicate_rows = df[df.duplicated()]\ndisplay(duplicate_rows)\n\n# Checking for duplicate values in the Crash ID column\nduplicate_crash_ids = df[df.duplicated(['Crash ID'])]\ndisplay(duplicate_crash_ids)\n\n\n\n\n\n\n\n\n\nCrash ID\nState\nMonth\nYear\nDayweek\nTime\nCrash Type\nBus Involvement\nArticulated Truck Involvement\nSpeed Limit\nRoad User\nGender\nAge\nChristmas Period\nEaster Period\nAge Group\nDay of week\nTime of day\nMonth Name\n\n\n\n\n473\n20215012\nWA\n4\n2021\nSaturday\n20:50\nSingle\nNo\nNo\n110\nPassenger\nMale\n16\nNo\nNo\n0_to_16\nWeekend\nNight\nApril\n\n\n1426\n20203031\nQld\n6\n2020\nSunday\n4:00\nSingle\nNo\nNo\n70\nPassenger\nFemale\n14\nNo\nNo\n0_to_16\nWeekend\nNight\nJune\n\n\n1650\n20202055\nVic\n4\n2020\nWednesday\n17:30\nMultiple\nNo\nYes\n100\nPedestrian\nNaN\n-9\nNo\nNo\nNaN\nWeekday\nDay\nApril\n\n\n1651\n20202055\nVic\n4\n2020\nWednesday\n17:30\nMultiple\nNo\nYes\n100\nPedestrian\nNaN\n-9\nNo\nNo\nNaN\nWeekday\nDay\nApril\n\n\n1652\n20202055\nVic\n4\n2020\nWednesday\n17:30\nMultiple\nNo\nYes\n100\nPedestrian\nNaN\n-9\nNo\nNo\nNaN\nWeekday\nDay\nApril\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n52623\n19895071\nWA\n1\n1989\nSunday\n22:17\nSingle\nNo\nNo\n110\nPassenger\nMale\n19\nNo\nNo\n17_to_25\nWeekend\nNight\nJanuary\n\n\n52783\n19892372\nVic\n1\n1989\nThursday\n14:08\nMultiple\nNo\nNo\n60\nPassenger\nFemale\n65\nNo\nNo\n65_to_74\nWeekday\nDay\nJanuary\n\n\n52785\n19892372\nVic\n1\n1989\nThursday\n14:08\nMultiple\nNo\nNo\n60\nPassenger\nFemale\n65\nNo\nNo\n65_to_74\nWeekday\nDay\nJanuary\n\n\n52819\n19896006\nTas\n1\n1989\nWednesday\n20:20\nMultiple\nNo\nYes\n100\nPassenger\nMale\n13\nNo\nNo\n0_to_16\nWeekday\nNight\nJanuary\n\n\n52841\n19895088\nWA\n1\n1989\nMonday\n6:00\nSingle\nNo\nNo\n110\nPassenger\nMale\n17\nYes\nNo\n17_to_25\nWeekday\nDay\nJanuary\n\n\n\n\n155 rows × 19 columns\n\n\n\n\n\n\n\n\n\n\nCrash ID\nState\nMonth\nYear\nDayweek\nTime\nCrash Type\nBus Involvement\nArticulated Truck Involvement\nSpeed Limit\nRoad User\nGender\nAge\nChristmas Period\nEaster Period\nAge Group\nDay of week\nTime of day\nMonth Name\n\n\n\n\n14\n20213026\nQld\n9\n2021\nWednesday\n23:00\nMultiple\nNo\nNo\nNaN\nDriver\nMale\n34\nNo\nNo\n26_to_39\nWeekday\nNight\nSeptember\n\n\n52\n20212073\nVic\n9\n2021\nTuesday\n12:30\nMultiple\nNaN\nNaN\nNaN\nDriver\nFemale\n71\nNo\nNo\n65_to_74\nWeekday\nDay\nSeptember\n\n\n59\n20211068\nNSW\n9\n2021\nTuesday\n21:50\nSingle\nNo\nNo\n60\nPassenger\nFemale\n6\nNo\nNo\n0_to_16\nWeekday\nNight\nSeptember\n\n\n63\n20212015\nVic\n9\n2021\nThursday\n19:33\nMultiple\nNaN\nNaN\nNaN\nNaN\nMale\n15\nNo\nNo\n0_to_16\nWeekday\nNight\nSeptember\n\n\n64\n20212015\nVic\n9\n2021\nThursday\n19:33\nMultiple\nNaN\nNaN\nNaN\nNaN\nMale\n16\nNo\nNo\n0_to_16\nWeekday\nNight\nSeptember\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n52832\n19892409\nVic\n1\n1989\nSaturday\n22:54\nMultiple\nNo\nNo\n100\nDriver\nMale\n29\nNo\nNo\n26_to_39\nWeekend\nNight\nJanuary\n\n\n52835\n19891498\nNSW\n1\n1989\nSunday\n14:35\nMultiple\nNo\nNo\n80\nPassenger\nMale\n2\nYes\nNo\n0_to_16\nWeekend\nDay\nJanuary\n\n\n52836\n19893191\nQld\n1\n1989\nSaturday\n12:00\nMultiple\nNo\nYes\n60\nPassenger\nFemale\n22\nNo\nNo\n17_to_25\nWeekend\nDay\nJanuary\n\n\n52840\n19895088\nWA\n1\n1989\nMonday\n6:00\nSingle\nNo\nNo\n110\nPassenger\nMale\n17\nYes\nNo\n17_to_25\nWeekday\nDay\nJanuary\n\n\n52841\n19895088\nWA\n1\n1989\nMonday\n6:00\nSingle\nNo\nNo\n110\nPassenger\nMale\n17\nYes\nNo\n17_to_25\nWeekday\nDay\nJanuary\n\n\n\n\n5276 rows × 19 columns\n\n\n\nIn this dataset, Crash IDs represent a single event, but there are multiple rows for each Crash ID in some cases when there have been multiple fatalities in a crash. Since there appears to be no true duplicate rows, we will not drop any rows from the dataset."
  },
  {
    "objectID": "notebooks/0-eda-australian-road-fatalities.html#checking-for-outliers",
    "href": "notebooks/0-eda-australian-road-fatalities.html#checking-for-outliers",
    "title": "Analysis of Fatal Road Accidents in Australia since 1989",
    "section": "2.5 Checking for Outliers",
    "text": "2.5 Checking for Outliers\nIn this dataset we have a single continuous variable of interest, age. We will use a boxplot to check for outliers in this column.\n\n\nCode\n# Creating a boxplot to check for outliers in the Age column\nplt.figure(figsize=(8,3))\nsns.boxplot(x=df['Age'])\nplt.title('Boxplot of Age')\nplt.xlabel('Age')\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above boxplot shows that there are no outliers in the Age column. Checking for outliers using the IRQ method will confirm this.\n\n\nCode\n# Creating a function to calculate the IRQ\ndef IRQ_and_bounds(column):\n    Q1 = column.quantile(0.25)\n    Q3 = column.quantile(0.75)\n    IRQ = Q3 - Q1\n    lower_bound = Q1 - (1.5 * IRQ)\n    upper_bound = Q3 + (1.5 * IRQ)\n    return IRQ, lower_bound, upper_bound\n\n# Using the IRQ function to calculate the IRQ of the Age column\nIRQ_and_bounds(df['Age'])\n\n# Using the IRQ function to check for outliers in the Age column\n\nirq_value, lower_bound, upper_bound = IRQ_and_bounds(df['Age'])\n\nprint(f\"IRQ: {irq_value}, Lower Bound: {lower_bound}, Upper Bound: {upper_bound}\")\n\n# Using the IRQ function to check for outliers in the Age column\ndef identify_outliers(column):\n    _, lower_bound, upper_bound = IRQ_and_bounds(column)\n    outliers = column[(column &lt; lower_bound) | (column &gt; upper_bound)]\n    return outliers\n\noutliers = identify_outliers(df['Age'])\nprint(f\"Outliers: {outliers.values}\")\n\n\nIRQ: 33.0, Lower Bound: -27.5, Upper Bound: 104.5\nOutliers: []"
  },
  {
    "objectID": "notebooks/0-eda-australian-road-fatalities.html#demographic-analysis-of-fatal-road-accidents-in-australia",
    "href": "notebooks/0-eda-australian-road-fatalities.html#demographic-analysis-of-fatal-road-accidents-in-australia",
    "title": "Analysis of Fatal Road Accidents in Australia since 1989",
    "section": "3.1 Demographic Analysis of Fatal Road Accidents in Australia",
    "text": "3.1 Demographic Analysis of Fatal Road Accidents in Australia\n\n\nCode\n# Age and Sex distribution of fatal road transport accidents in Australia\nsns.set_style('whitegrid')\nplt.figure(figsize=(16,8))\nsns.histplot(df['Age'], bins=40,\n            kde= False,\n            alpha=0.9)\nplt.title(f\"Age Distribution of Fatal Road Transport Accidents in Australia ({earliest_year} to {latest_year})\")\nplt.xlabel('Age')\nplt.xticks(range(0, 101, 10))\nplt.ylabel('Count')\nplt.show()\n\n\n\n\n\n\n\n\n\nThe histogram shows a notable peak in the frequency of fatal accidents involving people in their 20’s and early 30’s. After the age of around 35 there is a general decline in the frequency of fatal accidents.\n\n\nCode\n# Plot of fatal accidents by gender\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(4,6))\nsns.countplot(x='Gender', \n            data=df,\n            alpha=0.9)\nplt.title(f\"Gender Distribution of Fatal Accidents in Australia by\\nCount ({earliest_year} to {latest_year})\")\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.show()\n\n\n\n\n\n\n\n\n\nThe gender distribution of fatal accidents shows a significantly large number of males are represented in the data than females, we will express this as a percentage.\n\n\nCode\n# Gender distribution of fatal accidents by gender as a percentage\ngender_percentage = (df['Gender'].value_counts(normalize=True) * 100).reset_index()\ngender_percentage.columns = ['Gender', 'Percentage']\n\n# Plotting\nplt.figure(figsize=(4,6))\nsns.set_style('whitegrid')\nsns.barplot(x='Gender', \n            y='Percentage', \n            data=gender_percentage, \n            alpha=0.9)\nplt.title(f\"Gender Distribution of Fatal Accidents in Australia\\nas a Percentage ({earliest_year} to {latest_year})\")\nplt.xlabel('Gender')\nplt.ylabel('Percentage')\nplt.show()\n\n\n\n\n\n\n\n\n\nThe bar graph above shows that over 70% of road transport fatalities are male compared to approximately 30% female.\n\n\nCode\n# Density plot of age and gender\nplt.figure(figsize=(16,8))\nsns.set_style('whitegrid')\nsns.kdeplot(data=df, \n            x='Age', \n            hue='Gender', \n            fill=True, \n            palette='rainbow', \n            alpha=0.5)\nplt.title(f\"Age and Gender Distribution of Fatal Accidents in Australia ({earliest_year} to {latest_year})\")\nplt.xlabel('Age')\nplt.ylabel('Density')\nplt.show()\n\n\n\n\n\n\n\n\n\nThe density plot above shows the age distribution of fatal accidents in Australia separated by gender. It can be seen that both males and females show a peak around the age of 20, and that the age distribution of fatal accidents are relatively similar between the two genders.\n\n\nCode\n# Box plot of age and gender distribution\nplt.figure(figsize=(4,6))\nsns.set_style('whitegrid')\nsns.boxplot(x='Gender', \n            y='Age', \n            data=df)\nplt.title(f\"Box Plot of Age and Gender Distribution of Fatal Accidents\\nin Australia ({earliest_year} to {latest_year})\")\nplt.xlabel('Gender')\nplt.ylabel('Age')\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above box plots show that the median age appear to be slightly higher for males than females, with several male outliers appearing when the data is segregated by gender.\n\n\nCode\n# Calculate the number of accidents by road user\nroad_user_counts = df['Road User'].value_counts().reset_index()\nroad_user_counts.columns = ['Road User', 'Accidents']\n\n# Fatalities by Road User Type\nsns.set_style('whitegrid')\nplt.figure(figsize=(12,6))\nsns.barplot(x='Accidents', \n            y='Road User', \n            data=road_user_counts, \n            hue='Road User', \n            palette='rainbow')\nplt.title(f\"Number of Fatal Accidents between ({earliest_year} to {latest_year}) by Road User Type\")\nplt.xlabel('Number of Accidents')\nplt.ylabel('Road User Type')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above horizontal bar chart shows a breakdown of the number of fatal accidents by road user type. From that chart it can be seen that the majority of fatal accidents involve car occupants, followed by pedestrians and motorcyclists.\n\n\nCode\n# Calculate the number of accidents by road user\nage_group_fatalities = df.groupby(['Year', 'Age Group'])['Crash ID'].size().reset_index(name='Fatalities')\n\n# Using a pivot table to transform the data into wide format\nage_group_fatalities_pivot = age_group_fatalities.pivot(index='Year', \n                                                        columns='Age Group', \n                                                        values='Fatalities')\nage_group_fatalities_pivot.columns = age_group_fatalities_pivot.columns.str.replace('_', ' ') # Remove underscores from column names so they appear more nearly in the legend\n\n# Plotting\nsns.set_style('whitegrid')\nage_group_fatalities_pivot.plot(kind='bar', \n                                stacked=True, \n                                figsize=(12, 6), \n                                cmap='rainbow')\nplt.title(f\"Fatalities by Age Group Since {earliest_year} to {latest_year}\")\nplt.xticks(rotation=45)\nplt.xlabel('Year')\nplt.ylabel('Fatalities')\nplt.legend(title='Age Group')\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above stacked bar graph shows the proportions of fatalities by age group from 1989. The graph shows a general decline in fatalities while proportions remain relatively consistent.\n\n\nCode\n# Calculate the number of accidents by road user \nroad_user_fatalities = df.groupby(['Year', 'Road User'])['Crash ID'].size().reset_index(name='Fatalities')\n\n# Using a pivot table to transform the data into wide format\nroad_user_fatalities_pivot = road_user_fatalities.pivot(index='Year', \n                                                        columns='Road User', \n                                                        values='Fatalities')\n\n# Plotting\nsns.set_style('whitegrid')\nroad_user_fatalities_pivot.plot(kind='bar', \n                                stacked=True, \n                                figsize=(12, 6), \n                                cmap='jet')\nplt.title(f\"Fatalities by Road User Type ({earliest_year} to {latest_year})\")\nplt.xlabel('Year')\nplt.ylabel('Fatalities')\nplt.xticks(rotation=45)\nplt.legend(title='Road User Type')\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above stacked bar graph shows the proportions of fatalities by road user type from 1989 to 2021. The graph shows a general decline in fatalities, and proportions that remain relatively consistent."
  },
  {
    "objectID": "notebooks/0-eda-australian-road-fatalities.html#geographic-analysis-of-fatal-road-accidents-in-australia",
    "href": "notebooks/0-eda-australian-road-fatalities.html#geographic-analysis-of-fatal-road-accidents-in-australia",
    "title": "Analysis of Fatal Road Accidents in Australia since 1989",
    "section": "3.2 Geographic Analysis of Fatal Road Accidents in Australia",
    "text": "3.2 Geographic Analysis of Fatal Road Accidents in Australia\n\n\nCode\n# Pie chart of fatal accidents by State\n# Firstly, calculate the number of accidents by state. \nstate_counts = df['State'].value_counts().reset_index()\nstate_counts.columns = ['State', 'Accidents']\n\nplt.figure(figsize=(10,10))\nplt.pie(x=state_counts['Accidents'], \n        labels=state_counts['State'], \n        autopct='%1.1f%%', \n        startangle=90)\nplt.title(f\"Percentage of Fatal Accidents by State ({earliest_year} to {latest_year})\")\nplt.show()\n\n\n\n\n\n\n\n\n\nThe pie chart shows that the majority of fatal accidents occur in New South Wales (31%), followed by Victoria (30%) and Queensland (20%).\n\n\nCode\n# Bar chart of fatal accidents by State\nsns.set_style('whitegrid')\nplt.figure(figsize=(12,6))\nsns.barplot(x='Accidents', \n            y='State', \n            data=state_counts,\n            hue='State',\n            alpha=0.9,\n            palette='rainbow')\nplt.title(f\"Number of Fatal Accidents by State ({earliest_year} to {latest_year})\")\nplt.xlabel('Number of Accidents')\nplt.ylabel('State')\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above bar graph is an alternative visualisation of the number of fatal accidents by state."
  },
  {
    "objectID": "notebooks/0-eda-australian-road-fatalities.html#temporal-analysis-of-fatal-road-accidents-in-australia",
    "href": "notebooks/0-eda-australian-road-fatalities.html#temporal-analysis-of-fatal-road-accidents-in-australia",
    "title": "Analysis of Fatal Road Accidents in Australia since 1989",
    "section": "3.3 Temporal Analysis of Fatal Road Accidents in Australia",
    "text": "3.3 Temporal Analysis of Fatal Road Accidents in Australia\n\nAccidents by Month of Year\n\n\nCode\n# Now we will calculate the number of accidents by month\n\nmonth_counts = df['Month Name'].value_counts().reset_index()\nmonth_counts.columns = ['Month', 'Accidents']\n\n# Sorting the months in order by converting them to a categorical variable and sorting by the month order\n\nmonth_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July',\n            'August', 'September', 'October', 'November', 'December']\nmonth_counts['Month'] = pd.Categorical(month_counts['Month'], categories=month_order, ordered=True)\nmonth_counts = month_counts.sort_values('Month')\n\n\n\n\nCode\n# Plot the number of accidents by month\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(12,6))\nsns.barplot(x='Month', \n            y='Accidents', \n            data=month_counts, \n            hue='Month', \n            palette='rainbow',\n            alpha=0.9)\nplt.title(f\"Number of Fatal Accidents by Month ({earliest_year} to {latest_year})\")\nplt.xlabel('Month')\nplt.ylabel('Number of Accidents')\nplt.xticks(rotation=45)\nplt.yticks(range(0, 5500, 500))\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above bar chart shows that the number of fatal accidents is relatively consistent throughout the year with December and March having a slightly higher number of accidents than other months.\n\n\nCode\n# Count accidents by day of the week\nday_counts = df['Dayweek'].value_counts().reset_index()\nday_counts.columns = ['Day', 'Accidents']\n\n# Sort the days in order\nday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\nday_counts['Day'] = pd.Categorical(day_counts['Day'], categories=day_order, ordered=True)\nday_counts = day_counts.sort_values('Day')\n\n\n\n\nCode\n# Plot the number of accidents by day of the week\n\nsns.set_style('whitegrid')\nplt.figure(figsize=(12,6))\nsns.barplot(x='Day', \n            y='Accidents', \n            data=day_counts, \n            hue='Day', \n            palette='rainbow',\n            alpha=0.9)\nplt.title(f\"Number of Fatal Accidents by Day of the Week ({earliest_year} to {latest_year})\")\nplt.xlabel('Day of the Week')\nplt.yticks(range(0, 12000, 1000))\nplt.ylabel('Number of Accidents')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above bar chart shows that the number of fatal accidents is highest on Saturday, followed by Friday and Sunday. We can also plot the percentage of accidents by day of the week below.\n\n\nCode\nday_counts['Percentage'] = (day_counts['Accidents'] / day_counts['Accidents'].sum()) * 100\nsns.set_style('whitegrid')\nplt.figure(figsize=(12,6))\nsns.barplot(x='Day', \n            y='Percentage', \n            data=day_counts, \n            hue='Day', \n            palette='rainbow')\nplt.title(f\"Percentage of Fatal Accidents by Day of the Week ({earliest_year} to {latest_year})\")\nplt.xlabel('Day of the Week')\nplt.ylabel('Percentage of Accidents (%)')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\n\nFinally, we will create a heatmap of time of day and day of the week to visualise the temporal distribution of fatal accidents.\n\n\nCode\n# We will create a new data frame for this visualisation because we have to do some manipulation that involves dropping rows. \n\n# Creating a new dataframe\nheatmap_df = df[['Time', 'Dayweek']].copy()\n\n# Dropping rows with missing values\nheatmap_df = heatmap_df.dropna(subset=['Time'])\n\n# Then we will extract the hour from the time field to make it easier to create a heatmap\nheatmap_df['Hour'] = heatmap_df['Time'].str.split(':').str[0].astype(int)\n\n# Next we need to create a pivot table to convert the data into wide format\npivot_table = pd.pivot_table(heatmap_df, \n                            values='Time', \n                            index=['Hour'], \n                            columns=['Dayweek'], \n                            aggfunc='count', \n                            fill_value=0)\n\n# Finally plotting a heatmap\nplt.figure(figsize=(12, 8))\nsns.heatmap(pivot_table[day_order], \n            annot=True, \n            cmap='RdYlGn_r', # Take a colour pallet from https://loading.io/color/feature/RdYlGn-9/ and use _r to flip it so that red is higher and green is lower\n            fmt='g')\nplt.title(f\"Heatmap of Fatal Accidents ({earliest_year} to {latest_year}) by Day of Week and Hour of Day\")\nplt.xlabel('Day of the Week')\nplt.ylabel('Hour of Day')\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above heatmap shows that the majority of fatal accidents occur at 3pm on Friday, and that Friday and Saturday afternoons have the highest number of fatal accidents.\n\n\nChange over time in the number of fatal accidents by year\nWe will now examine how these trends have changed over time. Firstly, we will create a line graph of the number of fatal accidents by year.\n\n\nCode\n# Creating a line graph of fatalities by year\nfatalities_per_year = df.groupby('Year')['Crash ID'].size().reset_index()\nfatalities_per_year.columns = ['Year', 'Fatalities']\n\n# Creating a Line Plot\nsns.set_style('whitegrid')\nplt.figure(figsize=(12, 6))\nsns.lineplot(x='Year', \n            y='Fatalities',\n            data=fatalities_per_year,\n            marker=\"o\")\nplt.title(f\"Total Number of Fatalities by Year ({earliest_year} to {latest_year})\")\nplt.xlabel('Year')\nplt.ylabel('Number of Fatalities')\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\nWe can see an overall decline in the number of fatal road transport accidents in Australia since 1989. The raw numbers are declining despite a growing population. To explore this trend further we will calculate the number of fatal accidents per 100,000 persons.\n\n\nCode\n# We find population data for Australia from 1989 to 2021 from the United Nations website: https://population.un.org/dataportal/data/indicators/49/locations/36/start/1989/end/2021/table/pivotbylocation\n# Using this data we create a dictionary with Year as the index. \n\naustralian_population_data =  {\n    'Year': list(range(1989, 2022)),\n    'Population': [\n        16796588, 17048003, 17271086, 17462504, 17631511, 17805504, 18003000, \n        18211845, 18410250, 18601667, 18800892, 19017963, 19248143, 19475844, \n        19698999, 19925056, 20171731, 20467030, 20830828, 21247873, 21660892, \n        22019168, 22357034, 22729269, 23111782, 23469579, 23820236, 24195701, \n        24590334, 24979230, 25357170, 25670051, 25921089\n    ]\n}\n\n# Creating a dataframe from the dictionary\npopulation_df = pd.DataFrame(australian_population_data)\n\n# Merge the population data with the fatalities data\nmerged_df = pd.merge(fatalities_per_year, population_df, on='Year', how='inner')\n\n# Calculate the number of fatalities per 100,000 people\nmerged_df['Fatalities per 100k'] = (merged_df['Fatalities'] / merged_df['Population']) * 100000\n\n# Line plot of fatalities per 100,000 people\nsns.set_style('whitegrid')\nplt.figure(figsize=(12, 6))\nsns.lineplot(x='Year', \n            y='Fatalities per 100k', \n            data=merged_df,\n            marker=\"o\")\nplt.title(f\"Fatalities per 100,000 Population by Year ({earliest_year} to {latest_year})\")\nplt.xlabel('Year')\nplt.ylabel('Fatalities per 100,000 Population')\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above line graphs shows a steady decline in both overall fatalities and fatalities per 100,000 in Australia.\n\n\nChange over time in fatalities by gender\nWe will now examine if there has been a change in the distribution of fatal accidents by gender over time.\n\n\nCode\n# Grouping the number of fatalities each year by gender\ngender_fatalities = df.groupby(['Year', 'Gender'])['Crash ID'].size().reset_index(name='Fatalities')\n\n# Calculating total fatalities per year\ntotal_fatalities_per_year = gender_fatalities.groupby('Year')['Fatalities'].sum().reset_index(name='Total Fatalities')\n\n# Merging the dataframes and calculating proportions\ngender_fatalities = pd.merge(gender_fatalities, total_fatalities_per_year, on='Year')\ngender_fatalities['Proportion'] = (gender_fatalities['Fatalities'] / gender_fatalities['Total Fatalities']) * 100\n\n# Pivoting the data for easier plotting\ngender_proportions_pivot = gender_fatalities.pivot(index='Year', columns='Gender', values='Proportion')\n\n# Plotting\nsns.set_style('whitegrid')\nplt.figure(figsize=(12, 6))\nsns.lineplot(data=gender_proportions_pivot)\nplt.title(f\"Proportion of Fatalities by Gender Over Time ({earliest_year} to {latest_year})\")\nplt.xlabel('Year')\nplt.ylabel('Proportion of Fatalities (%)')\nplt.grid(color='grey', linestyle='--', linewidth=0.5, alpha=0.5)\nplt.legend(title='Gender')\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above line graph shows that the ratio of male to female road transport fatalities has remained relatively consistent over time.\n\n\nChange over time in fatalities by age group\nWe will now examine if there has been a change in the distribution of fatal accidents by age group over time.\n\n\nCode\n# Plotting\nsns.set_style('whitegrid')\nplt.figure(figsize=(12, 6))\nsns.lineplot(data=age_group_fatalities_pivot, marker=\"o\", linewidth=2.5) # Use the pivot table created earlier\nplt.title(f\"Fatalities Over Time by Age Group ({earliest_year} to {latest_year})\")\nplt.xlabel('Year')\nplt.ylabel('Number of Fatalities')\nplt.grid(color='gray', linestyle='--', linewidth=0.5)\nplt.legend(title='Age Group')\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above line graph shows that the number of fatalities has decreased over time for all age groups. The largest decrease has been in the 17-25 age group, possibly due to the introduction of restrictions on provisional license holders. We can also see that in the early 2000’s, 40 to 64 year olds became the age group with the highest number of fatalities.\n\n\nChange over time in fatalities by road user type\nFinally, we will examine if there has been a change in the distribution of fatal accidents by road user type over time.\n\n\nCode\n# Grouping data by year and road user type, and counting fatalities\nped_and_cyclist_fatalities = df[df['Road User'].isin(['Pedal cyclist', 'Pedestrian'])]\n\n# Group data by Year and Road User, counting all Crash ID occurrences\nfatalities_by_year_user = ped_and_cyclist_fatalities.groupby(['Year', 'Road User'])['Crash ID'].count().reset_index(name='Fatalities')\n\n# Merge fatalities data with population data\nfatalities_with_pop = pd.merge(fatalities_by_year_user, population_df, on='Year', how='left')\n\n# Calculate fatalities per 100,000 people\nfatalities_with_pop['Fatalities per 100k'] = (fatalities_with_pop['Fatalities'] / fatalities_with_pop['Population']) * 100000\n\n# Pivot the data\nsns.set_style('whitegrid')\nplt.figure(figsize=(12, 6))\nsns.lineplot(x='Year', \n            y='Fatalities per 100k',\n            data=fatalities_with_pop, \n            hue='Road User', \n            marker=\"o\")\nplt.title(f\"Fatalities per 100,000 Population Over Time by Road User Type ({earliest_year} to {latest_year})\")\nplt.xlabel('Year')\nplt.ylabel('Fatalities per 100,000 Population')\nplt.grid(True)\nsns.despine()\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThe line graph above shows a steady decline in pedestrian fatalities since 1989, however cyclist fatalities have remained relatively consistent since the mid 1990’s."
  },
  {
    "objectID": "notebooks/0-eda-australian-road-fatalities.html#opportunities-for-further-research",
    "href": "notebooks/0-eda-australian-road-fatalities.html#opportunities-for-further-research",
    "title": "Analysis of Fatal Road Accidents in Australia since 1989",
    "section": "Opportunities for Further Research",
    "text": "Opportunities for Further Research\nThis dataset focuses solely on fatal accidents. Expanding future analyses to include injury data could provide a more comprehensive understanding of road safety trends.\nAdditionally, examining the injury-to-fatality ratio among pedestrians and cyclists could offer insights into the effectiveness of vehicle design improvements and road safety initiatives aimed at protecting vulnerable road users."
  },
  {
    "objectID": "notebooks/2-motorcyclists.html",
    "href": "notebooks/2-motorcyclists.html",
    "title": "Fatal Motorcycle Crashes",
    "section": "",
    "text": "A sub-analysis of the ARDD focusing on fatal motorcycle crashes.\nMotorcycle riding evokes freedom and exhilaration—but it also carries disproportionate risk. Despite advances in protective gear and rider assist technologies, motorcyclists remain significantly overrepresented in fatal crash statistics across Australia.\nThis sub-analysis investigates trends in fatal crashes involving motorcyclists and pillion passengers, drawing on over three decades of data. It aims to identify persistent risk patterns by year, state, and rider population, and to assess the relative burden on motorcyclists compared to their licensed population base."
  },
  {
    "objectID": "notebooks/2-motorcyclists.html#key-findings",
    "href": "notebooks/2-motorcyclists.html#key-findings",
    "title": "Fatal Motorcycle Crashes",
    "section": "1. Key Findings",
    "text": "1. Key Findings\n\nTime and Day Matter (A Lot) Fatalities peak sharply on Saturdays and Sundays, particularly in the afternoon hours between 1 PM and 5 PM. This aligns with recreational riding patterns, where less experienced or infrequent riders may be pushing limits on unfamiliar or technical roads (“the twisties”).\nSingle-Vehicle vs Multi-Vehicle Crashes* A sizeable proportion of fatal crashes involve single vehicles, particularly on weekends. This supports the idea that weekend fatalities may disproportionately involve loss of control rather than collision with another vehicle—an angle worth further exploration.\nGender Disparity A staggering 93.7% of fatalities were male, highlighting not just a gendered exposure to risk but perhaps also cultural attitudes toward riding, risk-taking, and safety behaviors.\nAge Distribution Fatalities skew young, peaking in the early 20s, then tapering with age—though a surprising number of older riders (60+) are still represented. The age distribution for female fatalities shows a bimodal pattern, possibly reflecting pillion vs rider roles.\nSeasonal Variation Fatalities are higher in summer and spring, peaking in March, and lowest in the winter months, especially July. Not exactly surprising—cold rain is a great motivator to leave the bike parked—but the difference is notable."
  },
  {
    "objectID": "notebooks/2-motorcyclists.html#data-cleaning",
    "href": "notebooks/2-motorcyclists.html#data-cleaning",
    "title": "Fatal Motorcycle Crashes",
    "section": "2. Data Cleaning",
    "text": "2. Data Cleaning\nThis notebook is fully self-contained and begins with a structured data cleaning pipeline. The full_clean_pipeline() function (sourced from scripts/data_cleaning.py) performs the following steps:\nLoads raw crash data from ../data/Crash_Data.csv\n\nCleans missing or inconsistent entries\n\nDrops incomplete, redundant, or irrelevant columns\n\nReturns a tidy, analysis-ready DataFrame\nThe cleaned dataset is then filtered to isolate fatal incidents involving motorcyclists and pillion passengers, forming the analytical base for this sub-study.\n\n\nCode\n\"\"\"\nThis notebook is fully self-contained and does not depend on the main EDA notebook.\n\nThe dataset is loaded and cleaned using `full_clean_pipeline()` from `scripts/data_cleaning.py`, which:\n- Loads raw data from /data/Crash_Data.csv\n- Cleans missing values and harmonizes variables\n- Drops incomplete or irrelevant columns\n- Returns a tidy, ready-to-analyze DataFrame\n\"\"\"\n\n# Set the directory for the script\nimport sys\nsys.path.append(\"../scripts\") \n\n# Importing necessary libraries\n\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display\n\nfrom data_cleaning import full_clean_pipeline\n\ndf = full_clean_pipeline()\n\n# Create variable for the earliest and latest years in the dataset to be dynamically displayed in plot titles\nlatest_year = df['Year'].max()\nearliest_year = df['Year'].min()\nprint(f\"The dataset contains data from {earliest_year} to {latest_year}.\")\n\n# Define constants for reuse\nmonth_names = {1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May',\n            6: 'June', 7: 'July', 8: 'August', 9: 'September', 10: 'October',\n            11: 'November', 12: 'December'}\n\nmonth_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July',\n            'August', 'September', 'October', 'November', 'December']\n\nday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\ncustom_palette = {'Female': 'lightcoral', 'Male': 'skyblue'}\n\n# Filter for Motorcyclists and Pillion Passengers\nmotorcyclist_pillion_fatalities = df[df['Road User'].isin(['Motorcycle rider', 'Motorcycle pillion passenger'])]\nmotorcyclist_fatalities = df[df['Road User'] == 'Motorcycle rider']\npillion_fatalities = df[df['Road User'] == 'Motorcycle pillion passenger']\n\n# print(\"\\nFiltered DataFrames created:\")\n# print(f\"- motorcyclist_pillion_fatalities: {motorcyclist_pillion_fatalities.shape[0]} rows\")\n# print(f\"- motorcyclist_fatalities: {motorcyclist_fatalities.shape[0]} rows\")\n# print(f\"- pillion_fatalities: {pillion_fatalities.shape[0]} rows\")\n\n# # Check for missing values in the filtered DataFrames\n# print(\"\\nMissing values in motorcyclist_pillion_fatalities:\")\n# print(motorcyclist_pillion_fatalities.isnull().sum())\n# print(\"\\nMissing values in motorcyclist_fatalities:\")\n# print(motorcyclist_fatalities.isnull().sum())\n# print(\"\\nMissing values in pillion_fatalities:\")\n# print(pillion_fatalities.isnull().sum())\n\n\nThe dataset contains data from 1989 to 2021."
  },
  {
    "objectID": "notebooks/2-motorcyclists.html#data-visualisation",
    "href": "notebooks/2-motorcyclists.html#data-visualisation",
    "title": "Fatal Motorcycle Crashes",
    "section": "3. Data Visualisation",
    "text": "3. Data Visualisation\nThe following section presents key visualizations that explore how motorcycle-related fatalities have varied over time and by geography. These charts aim to highlight long-term trends, state-level differences, and contextualize deaths relative to the licensed rider population.\n\n3.1 Yearly Fatalities\n\n\nCode\n# Group data by Year and Road User for the filtered set\nfatalities_by_year_user = motorcyclist_pillion_fatalities.groupby(['Year', 'Road User'])['Crash ID'].count().reset_index(name='Fatalities')\n\n# Capitalize the legend labels\nfatalities_by_year_user['Road User'] = fatalities_by_year_user['Road User'].str.title()\n\n# Plotting raw numbers of Fatalities\nsns.set_style('whitegrid')\nplt.figure(figsize=(12, 6))\nsns.lineplot(x='Year', \n            y='Fatalities',\n            data=fatalities_by_year_user, \n            hue='Road User', \n            marker=\"o\")\nplt.title(f'Motorcyclist and Pillion Fatalities by Year ({earliest_year} - {latest_year})')\nplt.xlabel('Year')\nplt.ylabel('Number of Fatalities')\nplt.grid(True)\nsns.despine()\nplt.legend(title=None)  # ← Removes legend title\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above line graph shows that the number of motorcycle rider fatalities has not seen a significant decrease over the years, with no obvious trend. While the number of pillion fatalities has remained relatively stable.\nHowever Australia’s population has increased substantially since 1989, so a more insightful comparison would be to look at the number of fatalities as a proportion of the number of motorcycle licences. License data from the Bureau of Infrastructure and Transport Research Economics (BITRE) goes back to 2013, so we will use that as our starting point. The following line graph shows the number of fatalities as a proportion of the number of motorcycle licences in Australia.\nIntegrating Motorcycle License Data\nTo contextualize fatality trends, we incorporated motorcycle licensing data from a BITRE. This dataset required substantial wrangling due to inconsistent formatting and labeling. Key preprocessing steps included:\nRemoving non-data rows\n\nForward-filling tier labels (Full, Provisional, L Permits)\n\nReshaping the data to align with crash statistics\nDespite its structure, this dataset provides valuable insight by allowing normalization of fatalities per licensed rider—offering a more accurate picture of risk over time.\n\n\nCode\ndef analyze_motorcycle_fatality_rates(motorcyclist_pillion_fatalities):\n    \"\"\"\n    Load motorcycle license data and calculate fatality rates per 10,000 licenses.\n    Returns the prepared dataframe for plotting.\n    \"\"\"\n    # 1. Load and process license data\n    df_licenses = pd.read_csv(\"../data/motorcycle_licenses.csv\", header=None, skiprows=1, skipinitialspace=True) \n    \n    # Define known license tier labels\n    tiers = [\"Full licence\", \"Provisional licence\", \"L Permits\"]\n    \n    # Add a column to track the tier label\n    df_licenses[\"tier\"] = df_licenses[0].where(df_licenses[0].isin(tiers)).ffill()\n    \n    # Filter out rows that are just the tier labels themselves\n    df_licenses = df_licenses[~df_licenses[0].isin(tiers)].copy()\n    \n    # Rename columns based on expected positions\n    if df_licenses.shape[1] == 9: # 8 original + 1 tier\n        df_licenses.columns = [\"date\", \"car\", \"motorcycle\", \"light_rigid\", \"medium_rigid\", \"heavy_rigid\", \"heavy_combination\", \"multi_combination\", \"tier\"]\n    else:\n        print(f\"Warning: Unexpected number of columns ({df_licenses.shape[1]}) in license data after adding tier. Check CSV structure.\")\n        return pd.DataFrame()  # Return empty DataFrame if there's an error\n    \n    # Extract the last two digits after the hyphen\n    two_digit_year = df_licenses[\"date\"].str.extract(r\"-(\\d{2})$\").iloc[:, 0]\n    # Prepend '20' and convert to numeric (integer), handling potential errors\n    df_licenses[\"year\"] = pd.to_numeric(\"20\" + two_digit_year, errors='coerce')\n    \n    # Clean the motorcycle license count column\n    df_licenses[\"motorcycle\"] = (\n        df_licenses[\"motorcycle\"]\n        .astype(str) \n        .str.replace(\",\", \"\", regex=False)\n        .str.replace(\" \", \"\", regex=False)\n        .str.strip() \n        .replace(\"\", pd.NA) \n    )\n    \n    # Convert motorcycle column to numeric, coercing errors to NA\n    df_licenses[\"motorcycle\"] = pd.to_numeric(df_licenses[\"motorcycle\"], errors=\"coerce\")\n    \n    # Drop rows where year extraction failed or motorcycle count is missing/invalid\n    df_licenses = df_licenses.dropna(subset=[\"year\", \"motorcycle\"])\n    \n    # Convert year and motorcycle count to integer type now that NAs are handled\n    if df_licenses.empty:\n        print(\"Warning: License DataFrame is empty after cleaning and dropping NAs. Cannot create summary.\")\n        return pd.DataFrame()\n        \n    # Convert year first as maybe it was float due to coerce\n    df_licenses[\"year\"] = df_licenses[\"year\"].astype(int) \n    df_licenses[\"motorcycle\"] = df_licenses[\"motorcycle\"].astype(int) \n    \n    # Group by year and sum the motorcycle licenses across all tiers\n    license_summary = (\n        df_licenses.groupby(\"year\")[\"motorcycle\"]\n        .sum()\n        .reset_index(name=\"total_motorcycle_licenses\")\n    )\n    \n    # 2. Calculate total fatalities per year\n    total_fatalities_per_year = (\n        motorcyclist_pillion_fatalities.groupby('Year')['Crash ID']\n        .count()\n        .reset_index(name='total_fatalities')\n    )\n    \n    # 3. Merge fatality data with license data\n    merged_data = pd.merge(\n        total_fatalities_per_year, \n        license_summary, \n        left_on='Year', \n        right_on='year', \n        how='inner'  # Use inner merge to keep only years present in both datasets\n    )\n    \n    # 4. Filter for the desired year range\n    start_year_rate = 2013\n    end_year_rate = 2022\n    merged_data_filtered = merged_data[\n        (merged_data['Year'] &gt;= start_year_rate) & (merged_data['Year'] &lt;= end_year_rate)\n    ].copy()\n    \n    # 5. Calculate the rate per 10,000 licenses\n    merged_data_filtered['fatalities_per_10k_licenses'] = np.where(\n        merged_data_filtered['total_motorcycle_licenses'] &gt; 0,\n        (merged_data_filtered['total_fatalities'] / merged_data_filtered['total_motorcycle_licenses']) * 10000,\n        0  # Or pd.NA if you prefer\n    )\n    \n    return merged_data_filtered, start_year_rate, end_year_rate\n\n# Run the analysis function\nmerged_data_filtered, start_year_rate, end_year_rate = analyze_motorcycle_fatality_rates(motorcyclist_pillion_fatalities)\n\n# Plot the rate over time\nif not merged_data_filtered.empty:\n    plt.figure(figsize=(12, 6))\n    sns.lineplot(\n        x='Year', \n        y='fatalities_per_10k_licenses', \n        data=merged_data_filtered, \n        marker='o'\n    )\n    plt.title(f'Motorcyclist & Pillion Fatalities per 10,000 Licenses ({start_year_rate}-{end_year_rate})')\n    plt.xlabel('Year')\n    plt.ylabel('Fatalities per 10,000 Licenses')\n    plt.grid(True)\n    sns.despine()\n    plt.tight_layout()\n    plt.show()\nelse:\n    print(\"\\nNo data available to plot fatalities per 10,000 licenses.\")\n\n\n\n\n\n\n\n\n\nThis adjusted measure suggests a gradual decline in fatalities relative to license numbers, particularly since 2016. However, this trend should be interpreted with caution. Unlike car licenses, which are typically held by individuals who drive regularly, motorcycle licenses are often retained even when individuals ride infrequently or not at all. For many, motorcycling is a lifestyle or leisure activity rather than a primary mode of transport. As a result, the number of active, high-frequency riders may be significantly lower than the license count suggests.\nFurthermore, the data does not account for changes in road usage patterns, safety equipment adoption (e.g., improved helmets or protective gear), or infrastructure developments that may influence risk exposure. Without granular data on actual riding frequency, distance traveled, or rider demographics, this analysis can only provide a rough indication of risk per license holder—not per rider or per kilometer traveled.\nIn summary, while the licensing-adjusted fatality rate offers a more nuanced view than raw numbers alone, it remains a limited proxy for exposure and risk. Additional data on active ridership and usage patterns would be needed to draw firmer conclusions about safety trends in the Australian motorcycling community.\n\n\n3.2 Fatalities by State\n\n\nCode\n# Group data by Year and State\nfatalities_by_year_state = motorcyclist_pillion_fatalities.groupby(['Year', 'State'])['Crash ID'].count().reset_index(name='Fatalities')\n\n# Create a pivot table for the stacked bar chart\npivot_fatalities_state = fatalities_by_year_state.pivot(index='Year', columns='State', values='Fatalities').fillna(0)\n\n# Sort the index to make sure years are in order\npivot_fatalities_state = pivot_fatalities_state.sort_index()\n\n# Plotting stacked bar chart\nsns.set_style('whitegrid')\npivot_fatalities_state.plot(kind='bar', stacked=True, figsize=(12, 6), cmap='tab20') # Using a colormap suitable for categorical data\nplt.title(f'Motorcyclist and Pillion Fatalities by State ({earliest_year} - {latest_year})')\nplt.xlabel('Year')\nplt.ylabel('Number of Fatalities')\nplt.legend(title='State', bbox_to_anchor=(1.05, 1), loc='upper left') # Adjust legend position\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThe distribution of fatalities largely mirrors population size and urbanisation, with NSW, QLD, VIC, and WA accounting for the bulk of cases. No state appears to significantly over- or under-represented relative to its expected share.\n\n\n3.3 Age Distribution\n\n\nCode\n# Plotting the age distribution for motorcyclists and pillion passengers\nsns.set_style('whitegrid')\nplt.figure(figsize=(12, 6))\nsns.histplot(motorcyclist_pillion_fatalities['Age'].dropna(), bins=30, kde=True) # Drop NA values for plotting\nplt.title(f'Age Distribution of Motorcyclist and Pillion Fatalities ({earliest_year} - {latest_year})')\nplt.xlabel('Age')\nplt.ylabel('Number of Fatalities')\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\nFatalities are most common among riders in their 20s, tapering steadily with age. The distribution reflects general traffic fatality trends but drops off earlier — likely because many riders stop riding long before they stop driving.\n\n\n3.4 Gender Breakdown\n\n\nCode\n# Filter out missing gender values\ngender_fatalities = motorcyclist_pillion_fatalities.dropna(subset=['Gender'])\n\n# Group data by Gender, counting all Crash ID occurrences\ngender_count = gender_fatalities.groupby('Gender')['Crash ID'].count().reset_index(name='Fatalities')\n\n# Plotting a bar plot for Gender breakdown\nplt.figure(figsize=(8, 6))\nsns.barplot(x='Gender', y='Fatalities', data=gender_count, hue='Gender', palette=custom_palette, dodge=False, legend=False)\nplt.title(f'Motorcyclist and Pillion Fatalities by Gender ({earliest_year} - {latest_year})') \nplt.xlabel('Gender')\nplt.ylabel('Number of Fatalities')\nplt.tight_layout()\nplt.show()\n\n# # Calculate and print the percentage\n# gender_count['Percentage'] = (gender_count['Fatalities'] / gender_count['Fatalities'].sum()) * 100\n# print(\"Gender Breakdown (%):\")\n# print(gender_count[['Gender', 'Percentage']])\n\n\n\n\n\n\n\n\n\nThe overwhelming majority of motorcycle fatalities between 1989 and 2021 involved male riders, who accounted for 93.7% of all deaths. Female riders represented just 6.3% of the total. While this stark imbalance partly reflects the fact that far more men ride motorcycles, it also highlights a broader pattern in risk-taking behavior. Numerous studies have shown that male motorcyclists, particularly younger riders, are more likely to engage in speeding, aggressive cornering, and risky overtaking — all factors linked to crash risk. The gender gap in fatalities is therefore not just about who rides, but often how they ride.\n\n\nCode\n# Filter out missing Age or Gender values for the plot\nage_gender_data = motorcyclist_pillion_fatalities.dropna(subset=['Age', 'Gender'])\n\n# Plotting the violin plot\nplt.figure(figsize=(10, 7))\nsns.violinplot(x='Gender', y='Age', data=age_gender_data, palette=custom_palette, hue='Gender', legend=False)\nplt.title(f'Age Distribution of Motorcyclist and Pillion Fatalities by Gender ({earliest_year} - {latest_year})')\nplt.xlabel('Gender')\nplt.ylabel('Age')\nplt.yticks(np.arange(0, 101, 10)) # Set y-ticks from 0 to 100\nplt.grid(axis='y', linestyle='--', alpha=0.7)\nplt.show()\n\n\n\n\n\n\n\n\n\nThis violin plot shows the age distribution of motorcyclist and pillion fatalities by gender from 1989 to 2021. The distribution for males is skewed younger, with a dense cluster in the 20s and 30s — consistent with the overall age histogram. Female fatalities, while far fewer in number, show a slightly broader age distribution and a marginally higher mean age. The slight double peak among females could hint at two distinct rider or passenger cohorts — perhaps younger pillions and older recreational riders — but given the small sample size, caution is warranted in overinterpreting this pattern. Still, the plot suggests that female riders and passengers involved in fatal crashes tend to be, on average, a bit older than their male counterparts.\n\n\n3.5 Monthly Trends\n\n\nCode\n# Map month numbers to names\nmonth_counts_df = motorcyclist_pillion_fatalities.copy() # Use copy to avoid SettingWithCopyWarning if modifying view\nmonth_counts_df['Month Name'] = month_counts_df['Month'].map(month_names)\n\n# Calculate the number of fatalities by month\nmonth_counts = month_counts_df['Month Name'].value_counts().reset_index()\nmonth_counts.columns = ['Month', 'Fatalities']\n\n# Sort the months in calendar order\nmonth_counts['Month'] = pd.Categorical(month_counts['Month'], categories=month_order, ordered=True)\nmonth_counts = month_counts.sort_values('Month')\n\n# Plotting a bar plot for monthly breakdown\nplt.figure(figsize=(12, 6))\nsns.barplot(x='Month', y='Fatalities', data=month_counts, hue='Month', palette='viridis', dodge=False, legend=False) # Changed palette\nplt.title(f'Motorcyclist and Pillion Fatalities by Month ({earliest_year} - {latest_year})')\nplt.xlabel('Month')\nplt.ylabel('Number of Fatalities')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThis chart shows the number of motorcyclist and pillion fatalities by month from 1989 to 2021. Unsurprisingly, the colder, wetter winter months of June and July record the fewest fatalities — likely reflecting both reduced riding frequency and more cautious behavior during poor weather. In contrast, fatalities peak during the warmer months, particularly in March, October, and November, when riding conditions are ideal and recreational use spikes.\n\n\n3.7 Time of Day vs Day of Week\n\n\nCode\n# Select relevant columns and drop missing Time values\nheatmap_df = motorcyclist_pillion_fatalities[['Time', 'Dayweek']].dropna(subset=['Time']).copy()\n\n# Extracting the hour from the time field\nheatmap_df['Hour'] = heatmap_df['Time'].str.split(':').str[0].astype(int)\n\n# Creating a pivot table\npivot_table = pd.pivot_table(heatmap_df,\n                            values='Time',\n                            index=['Hour'],\n                            columns=['Dayweek'],\n                            aggfunc='count',\n                            fill_value=0)\n\n# Reindex to ensure all hours and days are present and ordered correctly\npivot_table = pivot_table.reindex(range(24), fill_value=0)\npivot_table = pivot_table.reindex(columns=day_order, fill_value=0) # Use the predefined day_order\n\n# Plotting the heatmap\nplt.figure(figsize=(12, 8))\nsns.heatmap(pivot_table, \n            annot=True, \n            cmap='RdYlGn_r', # Reversed Red-Yellow-Green colormap\n            fmt='g') # General format for annotations\nplt.title(f'Motorcyclist and Pillion Fatalities by Day of Week and Hour of Day ({earliest_year} - {latest_year})')\nplt.xlabel('Day of the Week')\nplt.ylabel('Hour of Day')\nplt.show()\n\n# # Note to self: Do two further plots\n\n# Weekday crashes might skew toward multi-vehicle, likely tied to commuting hours — think lane filtering gone wrong, inattentive drivers during peak traffic, or intersections in city zones.\n\n# Weekend crashes, on the other hand, might lean heavily toward single-vehicle incidents, especially on winding, high-speed rural roads (the twisties). This would back the theory that rider error, overconfidence, or unfamiliarity with terrain plays a major role.\n\n\n\n\n\n\n\n\n\nThis heatmap reveals a striking pattern in motorcycle fatalities by day and hour: the most dangerous time to ride is Saturday and Sunday afternoons, with a particularly sharp spike between 11 a.m. and 4 p.m.. While fatalities occur throughout the week, the clustering on weekends suggests a strong link to recreational riding behavior. Unlike weekday commuters, many weekend riders hit the road less frequently and may lack consistent exposure to high-risk situations. The open roads and “spirited” riding common on weekends can turn deadly — especially on rural or winding routes. In contrast, weekday fatalities are more evenly distributed and may involve commuter riders navigating traffic-heavy environments.\n\n\n3.8 Single vs Multi-Vehicle Crashes\n\n\nCode\n# Calculate counts for each Crash Type\ncrash_type_counts = motorcyclist_pillion_fatalities['Crash Type'].value_counts().reset_index()\ncrash_type_counts.columns = ['Crash Type', 'Fatalities']\n\n# Calculate percentages\ncrash_type_counts['Percentage'] = (crash_type_counts['Fatalities'] / crash_type_counts['Fatalities'].sum()) * 100\n\n# Print the percentages\nprint(\"Crash Type Breakdown (%):\")\nprint(crash_type_counts[['Crash Type', 'Percentage']])\n\n# Plotting the bar chart of percentages\nplt.figure(figsize=(8, 6))\nsns.barplot(x='Crash Type', y='Percentage', data=crash_type_counts, hue='Crash Type', palette='coolwarm', dodge=False, legend=False)\nplt.title(f'Percentage of Single vs Multi-Vehicle Crashes ({earliest_year} - {latest_year})')\nplt.xlabel('Crash Type')\nplt.ylabel('Percentage of Fatalities (%)')\nplt.ylim(0, 100) # Set y-axis limit to 100%\nplt.tight_layout()\nplt.show()\n\n\nCrash Type Breakdown (%):\n  Crash Type  Percentage\n0   Multiple   57.914286\n1     Single   42.085714\n\n\n\n\n\n\n\n\n\nAnalysis of crash types from 1989 to 2021 reveals that 58% of fatal motorcycle crashes involved another vehicle, while 42% were single-vehicle incidents. This finding highlights that a significant portion of fatalities occur without another party involved, suggesting that rider behavior, decision-making, or road conditions may play an important role.\nThe high proportion of single-vehicle motorcycle fatalities reinforces a longstanding principle in motorcycle safety: the rider themselves is often the greatest risk factor. While not all single-vehicle crashes stem from rider error, the data implies that many of these tragic events could potentially be mitigated through improved rider training, safer riding practices, and hazard awareness. It also raises questions about infrastructure and road maintenance, both of which disproportionately affect motorcyclists.\nIn contrast, multi-vehicle crashes remind us that vigilance is equally required around other road users, many of whom may fail to detect or respect motorcyclists. Together, these figures point to the need for both personal responsibility and broader systemic efforts to protect motorcyclists.\n\n\nCode\n# Line Graph of Proportions Over Time\n\n# Group by Year and Crash Type, count fatalities\nfatalities_by_year_crash_type = motorcyclist_pillion_fatalities.groupby(['Year', 'Crash Type'])['Crash ID'].count().reset_index(name='Fatalities')\n\n# Calculate total fatalities per year\ntotal_fatalities_per_year = fatalities_by_year_crash_type.groupby('Year')['Fatalities'].transform('sum')\n\n# Calculate proportion for each crash type per year\nfatalities_by_year_crash_type['Proportion'] = (fatalities_by_year_crash_type['Fatalities'] / total_fatalities_per_year) * 100\n\n# Plotting the line graph of proportions\nplt.figure(figsize=(12, 6))\nsns.lineplot(x='Year', \n            y='Proportion', \n            data=fatalities_by_year_crash_type, \n            hue='Crash Type', \n            marker='o',\n            palette='coolwarm')\nplt.title(f'Proportion of Single vs Multi-Vehicle Crashes Over Time ({earliest_year} - {latest_year})')\nplt.xlabel('Year')\nplt.ylabel('Proportion of Fatalities (%)')\nplt.ylim(0, 100) # Set y-axis limit to 100%\nplt.grid(True)\nsns.despine()\nplt.legend(title='Crash Type')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nAnalysis of fatal motorcycle crashes by type reveals an emerging trend: since 2015, the proportion of single-vehicle fatalities has been gradually increasing, while multi-vehicle fatalities have declined — a convergence not seen in earlier decades. This is especially noteworthy given the context of major technological and safety advancements in motorcycling during this period.\nModern motorcycles, including mid-range performance bikes, now come equipped with advanced safety features such as traction control, ABS, multiple rider modes, wheelie control, and quickshifters. High-end models even offer lean-angle-sensitive ABS, cornering lights, and ride-by-wire throttles. Simultaneously, protective gear has improved dramatically — with the rise of ECE 22.06-certified helmets, airbag vests, and CE Level 2-rated armor becoming increasingly standard and affordable.\nDespite these improvements, the relative rise in single-vehicle fatalities suggests that technology alone is not enough to prevent crashes. These incidents may stem from factors like excessive speed, rider inexperience, or misjudgment on corners and rural roads — scenarios where rider behavior and decision-making remain the dominant risk factors. It reinforces the idea that while safety features can mitigate outcomes, they cannot eliminate the inherent risk of riding. This underscores the ongoing need for rider education, road awareness, and perhaps cultural shifts within the motorcycling community toward valuing defensive riding as much as performance and thrill.\n\n\nCode\n# Step 1: Compute proportions\nday_crash_prop = (\n    motorcyclist_pillion_fatalities\n    .groupby(['Day of week', 'Crash Type'])['Crash ID']\n    .count()\n    .unstack() # Pivot 'Crash Type' to columns\n    .apply(lambda x: x / x.sum(), axis=1) # Calculate proportion across columns (within each 'Day of week')\n    .stack() # Convert back to long format\n    .rename(\"Proportion\")\n    .reset_index()\n)\n\n# Step 2: Plot\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(8, 5))\nsns.barplot(data=day_crash_prop, x='Day of week', y='Proportion', hue='Crash Type')\nplt.title('Proportion of Motorcycle Fatalities: Single vs Multiple Vehicle Crashes\\nBy Weekday vs Weekend')\nplt.ylabel('Proportion')\nplt.xlabel('')\nplt.ylim(0, 1)\nplt.legend(title='Crash Type')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThis chart highlights a clear difference in the distribution of motorcycle fatalities between weekdays and weekends. On weekdays, a greater proportion of fatal crashes involve multiple vehicles — likely reflecting commuter traffic and interactions with other road users. On weekends, however, the pattern shifts: single-vehicle crashes slightly outnumber multi-vehicle ones. This supports the theory that recreational riding — often done solo or in smaller groups — carries elevated risk, possibly due to speed, unfamiliar roads, or overconfidence. It suggests targeted interventions for both commuter safety during the week and rider behavior on weekends."
  },
  {
    "objectID": "notebooks/2-motorcyclists.html#conclusion",
    "href": "notebooks/2-motorcyclists.html#conclusion",
    "title": "Fatal Motorcycle Crashes",
    "section": "4. Conclusion",
    "text": "4. Conclusion\nMotorcyclists remain one of the most vulnerable groups on Australian roads. This sub-analysis of over three decades of fatal crash data reveals a consistent pattern: most deaths occur on weekends, in daylight hours, and involve young men riding alone. These fatalities often peak during warmer months and appear linked not only to traffic conditions but to rider behavior and exposure.\nBy integrating external licensing data, we adjusted fatality counts relative to the number of licensed riders—uncovering that risk remains elevated even when accounting for population growth. This suggests that broader safety interventions must be paired with targeted education, skill development, and cultural change within motorcycling communities.\nFuture work could explore:\nLinking crash severity to vehicle type or engine capacity\n\nIncorporating weather or road condition data\n\nAnalysing post-licensure experience (e.g., L/P plate data where available)\nUltimately, these insights can inform more nuanced and evidence-based road safety policies—especially those focused on preventing loss-of-control incidents among recreational riders."
  },
  {
    "objectID": "notebooks/1-vulnerable-road-users.html",
    "href": "notebooks/1-vulnerable-road-users.html",
    "title": "Sub Analysis of Vulnerable Road Users",
    "section": "",
    "text": "This brief sub-analysis explores patterns in fatal road transport accidents involving child pedestrians and cyclists in Australia from 1989 to present. These road users are considered vulnerable due to their physical fragility and limited situational awareness.\nThe notebook focuses on identifying: - Long-term trends in child pedestrian and cyclist fatalities - Temporal and gender-based differences - Key risk periods by month, day, and time\nFindings from this analysis can support targeted interventions to improve road safety for children and non-motorized road users."
  },
  {
    "objectID": "notebooks/1-vulnerable-road-users.html#key-findings",
    "href": "notebooks/1-vulnerable-road-users.html#key-findings",
    "title": "Sub Analysis of Vulnerable Road Users",
    "section": "Key Findings",
    "text": "Key Findings"
  },
  {
    "objectID": "notebooks/1-vulnerable-road-users.html#data-cleaning",
    "href": "notebooks/1-vulnerable-road-users.html#data-cleaning",
    "title": "Sub Analysis of Vulnerable Road Users",
    "section": "Data Cleaning",
    "text": "Data Cleaning\nData cleaning pipeline is imported from the data_cleaning.py file. The pipeline includes functions to load the data, clean it, and filter it for the analysis.\n\n\nCode\n\"\"\"\nThis notebook is fully self-contained and does not depend on the main EDA notebook.\n\nThe dataset is loaded and cleaned using `full_clean_pipeline()` from `scripts/data_cleaning.py`, which:\n- Loads raw data from /data/Crash_Data.csv\n- Cleans missing values and harmonizes variables\n- Drops incomplete or irrelevant columns\n- Returns a tidy, ready-to-analyze DataFrame\n\"\"\"\n\n# Set the directory for the script\nimport sys\nsys.path.append(\"../scripts\") \n\n# Importing necessary libraries\n\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display\n\nfrom data_cleaning import full_clean_pipeline\n\ndf = full_clean_pipeline()\n\n# Create variable for the earliest and latest years in the dataset to be dynamically displayed in plot titles\nlatest_year = df['Year'].max()\nearliest_year = df['Year'].min()\nprint(f\"The dataset contains data from {earliest_year} to {latest_year}.\")\n\n\nThe dataset contains data from 1989 to 2021.\n\n\n\n\nCode\n# Create commonly used filtered DataFrames\nchildren_under_16 = df[df['Age Group'] == '0_to_16']\nchild_ped_cyclist_fatalities = children_under_16[children_under_16['Road User'].isin(['Pedestrian', 'Pedal cyclist'])]\npedestrian_children = children_under_16[children_under_16['Road User'] == 'Pedestrian']\ncyclist_children = children_under_16[children_under_16['Road User'] == 'Pedal cyclist']\n\nprint(\"Filtered DataFrames created:\")\nprint(f\"- children_under_16: {children_under_16.shape[0]} rows\")\nprint(f\"- child_ped_cyclist_fatalities: {child_ped_cyclist_fatalities.shape[0]} rows\")\nprint(f\"- pedestrian_children: {pedestrian_children.shape[0]} rows\")\nprint(f\"- cyclist_children: {cyclist_children.shape[0]} rows\")\n\n# Define constants for reuse\nmonth_names = {1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May',\n               6: 'June', 7: 'July', 8: 'August', 9: 'September', 10: 'October',\n               11: 'November', 12: 'December'}\n\nmonth_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July',\n               'August', 'September', 'October', 'November', 'December']\n\nday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n\ncustom_palette = {'Female': 'lightcoral', 'Male': 'skyblue'}\n\n\nFiltered DataFrames created:\n- children_under_16: 4080 rows\n- child_ped_cyclist_fatalities: 1316 rows\n- pedestrian_children: 982 rows\n- cyclist_children: 334 rows"
  },
  {
    "objectID": "notebooks/1-vulnerable-road-users.html#child-pedestrian-and-cyclist-fatalities",
    "href": "notebooks/1-vulnerable-road-users.html#child-pedestrian-and-cyclist-fatalities",
    "title": "Sub Analysis of Vulnerable Road Users",
    "section": "1. Child Pedestrian and Cyclist Fatalities",
    "text": "1. Child Pedestrian and Cyclist Fatalities\n\n1.1 Child Pedestrian and Cyclist Fatalities by Year\n\n\nCode\n# Fatalities for Children Under 16 by Road User Type \n# Group data by Year and Road User, counting all Crash ID occurrences\nfatalities_by_year_user_children = child_ped_cyclist_fatalities.groupby(['Year', 'Road User'])['Crash ID'].count().reset_index(name='Fatalities') # Changed variable name\n\n# Plotting raw numbers of Fatalities for Children Under 16\nsns.set_style('whitegrid')\nplt.figure(figsize=(12, 6))\nsns.lineplot(x='Year', \n            y='Fatalities',\n            data=fatalities_by_year_user_children, \n            hue='Road User', \n            marker=\"o\")\nplt.title(f'Pedestrian and Cyclist Fatalities of Children Under 16 ({earliest_year} - {latest_year})')\nplt.xlabel('Year')\nplt.ylabel('Number of Fatalities')\nplt.grid(True)\nsns.despine()\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above line graph shows the raw number of cyclist and pedestrian fatalities involving children under 16 from 1989. The graph shows a steady decline in fatalities for both groups, with a plateau from the mid 2000s.\n\n\nCode\n# Group data by Year and State, counting all Crash ID occurrences\nfatalities_by_year_state = child_ped_cyclist_fatalities.groupby(['Year', 'State'])['Crash ID'].count().reset_index(name='Fatalities')\n\n# Create a pivot table for the stacked bar chart\npivot_fatalities_state = fatalities_by_year_state.pivot(index='Year', columns='State', values='Fatalities').fillna(0)\n\n# Sort the index to make sure years are in order\npivot_fatalities_state = pivot_fatalities_state.sort_index()\n\n# Plotting raw numbers of pedal cyclist and pedestrian fatalities for children under 16 by state (stacked bar chart)\nsns.set_style('whitegrid')\npivot_fatalities_state.plot(kind='bar', stacked=True, figsize=(12, 6), cmap='tab20')\nplt.title(f'Cyclist and Pedestrian Fatalities of Children Under 16 by State ({earliest_year} - {latest_year})')\nplt.xlabel('Year')\nplt.ylabel('Number of Fatalities')\nplt.legend(title='State')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThis stacked bar chart shows the number of fatal pedestrian and cyclist incidents involving children under 16 across Australian states from 1989 to 2023. States are separated by colour, and the number of fatalities is represented by the height of the bars. The graph shows that New South Wales has the highest number of fatalities, followed by Victoria and Queensland. The other states have significantly lower numbers of fatalities.\n\n\n1.2 Child Pedestrian and Cyclist Fatalities by Month\n\n\nCode\n# Use the pre-defined DataFrame directly\nmonth_counts_df = child_ped_cyclist_fatalities.copy() # Use copy only if adding column modifies original view, safer practice\nmonth_counts_df['Month Name'] = month_counts_df['Month'].map(month_names)\n\n# Calculate the number of accidents by month\nmonth_counts = month_counts_df['Month Name'].value_counts().reset_index()\nmonth_counts.columns = ['Month', 'Fatalities']\nmonth_counts['Month'] = pd.Categorical(month_counts['Month'], categories=month_order, ordered=True) # Uses global month_order\nmonth_counts = month_counts.sort_values('Month')\n\n# Plotting a bar plot for monthly breakdown\nplt.figure(figsize=(12, 6))\nsns.barplot(x='Month', y='Fatalities', data=month_counts, dodge=False)\nplt.title(f'Child Cyclist and Pedestrian Fatalities by Month ({earliest_year} - {latest_year})')\nplt.xlabel('Month')\nplt.ylabel('Number of Fatalities')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n1.3 Child Pedestrian and Cyclist Fatalities by Day of Week and Time of Day\n\n\nCode\n# Operate on a slice\nheatmap_df = child_ped_cyclist_fatalities[['Time', 'Dayweek']]\n# Dropping rows with missing values in 'Time' - creates a new DataFrame\nheatmap_df = heatmap_df.dropna(subset=['Time']).copy() # Add copy here after dropna to avoid SettingWithCopyWarning\n\n# Extracting the hour from the time field\nheatmap_df['Hour'] = heatmap_df['Time'].str.split(':').str[0].astype(int)\n\n# Creating a pivot table to convert the data into wide format\npivot_table = pd.pivot_table(heatmap_df,\n                            values='Time',\n                            index=['Hour'],\n                            columns=['Dayweek'],\n                            aggfunc='count',\n                            fill_value=0)\n\n# Reindex for consistency (optional but good practice)\npivot_table = pivot_table.reindex(range(24), fill_value=0)\npivot_table = pivot_table.reindex(columns=day_order, fill_value=0)\n\n\n# Plotting a heatmap\nplt.figure(figsize=(12, 8))\nsns.heatmap(pivot_table, # Use reindexed table\n            annot=True,\n            cmap='RdYlGn_r', # Take a colour palette from https://loading.io/color/feature/RdYlGn-9/ and use _r to flip it so that red is higher and green is lower\n            fmt='g')\nplt.title(f'Child Cyclist and Pedestrian Fatalities Count by Day of Week and Hour of Day ({earliest_year} - {latest_year})')\nplt.xlabel('Day of the Week')\nplt.ylabel('Hour of Day')\nplt.show()\n\n\n\n\n\n\n\n\n\nThis heatmap shows when child pedestrian and cyclist fatalities most commonly occur, broken down by hour of day and day of the week. Redder areas indicate higher fatality counts, highlighting dangerous time windows. The heatmap shows that most fatalities occur on weekdays, with a peak around 8-9am and 3-5pm, likely due to school drop-off and pick-up times. The heatmap also shows that fatalities on weekends are spread out more evenly throughout the day, with a peak around 3pm on Saturdays.\n\n\n1.4 Child Pedestrian and Cyclist Fatalities by Gender\n\n\nCode\nped_cyclist_gender_fatalities = child_ped_cyclist_fatalities.dropna(subset=['Gender'])\n\n# Group data by Gender, counting all Crash ID occurrences\nped_cyclist_gender_count = ped_cyclist_gender_fatalities.groupby('Gender')['Crash ID'].count().reset_index(name='Fatalities')\n\n# Plotting a bar plot for Gender breakdown of combined pedestrian and cyclist fatalities\nplt.figure(figsize=(8, 6))\nsns.barplot(x='Gender', y='Fatalities', data=ped_cyclist_gender_count, hue='Gender', palette=custom_palette, dodge=False, legend=False)\nplt.title(f'Child Cyclist and Pedestrian Fatalities by Gender ({earliest_year} - {latest_year})') \nplt.xlabel('Gender')\nplt.ylabel('Number of Fatalities')\nplt.tight_layout()\nplt.show()\n\n# Calculate and print the percentage\nped_cyclist_gender_count['Percentage'] = (ped_cyclist_gender_count['Fatalities'] / ped_cyclist_gender_count['Fatalities'].sum()) * 100\nprint(ped_cyclist_gender_count[['Gender', 'Percentage']])\n\n\n\n\n\n\n\n\n\n   Gender  Percentage\n0  Female   29.179331\n1    Male   70.820669"
  },
  {
    "objectID": "notebooks/1-vulnerable-road-users.html#child-pedestrian-fatalities",
    "href": "notebooks/1-vulnerable-road-users.html#child-pedestrian-fatalities",
    "title": "Sub Analysis of Vulnerable Road Users",
    "section": "2. Child Pedestrian Fatalities",
    "text": "2. Child Pedestrian Fatalities\n\n2.1 Child Pedestiran Fatalities by Year\n\n\nCode\nfatalities_by_year_state = pedestrian_children.groupby(['Year', 'State'])['Crash ID'].count().reset_index(name='Fatalities')\n\n# Create a DataFrame with all years in the desired range (DYNAMIC)\nall_years = pd.DataFrame({'Year': np.arange(earliest_year, latest_year + 1)})\n\n# Merge this with the fatalities_by_year_state DataFrame to include all years\nall_years_fatalities = pd.merge(all_years, fatalities_by_year_state, on='Year', how='left')\n\n# Fill NaN States potentially introduced by left merge before pivoting (though less likely here)\n# Fill NaN Fatalities with 0\nall_years_fatalities['Fatalities'] = all_years_fatalities['Fatalities'].fillna(0)\n# Ensure State column doesn't have NaNs if a year had 0 fatalities across all states (edge case)\n# all_years_fatalities['State'] = all_years_fatalities['State'].fillna('Unknown') # Or handle differently if needed\n\n# Create a pivot table for the stacked bar chart\n# Need to handle potential multiple states per year after merge if not grouping first\npivot_fatalities_state = pd.pivot_table(all_years_fatalities, index='Year', columns='State', values='Fatalities', fill_value=0)\n\n\n# Sort the index to make sure years are in order\npivot_fatalities_state = pivot_fatalities_state.sort_index()\n\n# Plotting raw numbers of pedestrian fatalities for children under 16 by state (stacked bar chart)\nsns.set_style('whitegrid')\npivot_fatalities_state.plot(kind='bar', stacked=True, figsize=(12, 6), cmap='tab20')\nplt.title(f'Pedestrian Fatalities of Children Under 16 by State ({earliest_year} - {latest_year})')\nplt.xlabel('Year')\nplt.ylabel('Number of Fatalities')\nplt.legend(title='State')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n2.2 Child Pedestrian Fatalities by Month\n\n\nCode\n# Use the pre-defined DataFrame for pedestrian children directly\nmonth_counts_ped_df = pedestrian_children.copy() # Use copy only if adding column modifies original view\nmonth_counts_ped_df['Month Name'] = month_counts_ped_df['Month'].map(month_names) # Uses global month_names\n\n# Calculate the number of fatalities by month\nmonth_counts_pedestrian = month_counts_ped_df['Month Name'].value_counts().reset_index()\nmonth_counts_pedestrian.columns = ['Month', 'Fatalities']\n\n# Sort the months in order using the existing month_order list\nmonth_counts_pedestrian['Month'] = pd.Categorical(month_counts_pedestrian['Month'], categories=month_order, ordered=True) # Uses global month_order\nmonth_counts_pedestrian = month_counts_pedestrian.sort_values('Month')\n\n# Plotting a bar plot for monthly breakdown of pedestrian fatalities\nplt.figure(figsize=(12, 6))\nsns.barplot(x='Month', y='Fatalities', data=month_counts_pedestrian, dodge=False, legend=False)\nplt.title(f'Child Pedestrian Fatalities by Month ({earliest_year} - {latest_year})')\nplt.xlabel('Month')\nplt.ylabel('Number of Fatalities')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n2.3 Child Pesestrian Fatalities by Day of Week and Time of Day\n\n\nCode\n# Create a slice of the pedestrian_children DataFrame with relevant columns\nheatmap_df_pedestrian = pedestrian_children[['Time', 'Dayweek']]\n\n# Dropping rows with missing values in 'Time' - creates a new DataFrame\nheatmap_df_pedestrian = heatmap_df_pedestrian.dropna(subset=['Time']).copy() # Add copy here\n\n# Extracting the hour from the time field\nheatmap_df_pedestrian['Hour'] = heatmap_df_pedestrian['Time'].str.split(':').str[0].astype(int)\n\n# Creating a pivot table for pedestrian fatalities\npivot_table_pedestrian = pd.pivot_table(heatmap_df_pedestrian,\n                                        values='Time',\n                                        index=['Hour'],\n                                        columns=['Dayweek'],\n                                        aggfunc='count',\n                                        fill_value=0)\n\n# Reindex the pivot table to include all hours from 0 to 23, filling missing hours with 0\npivot_table_pedestrian = pivot_table_pedestrian.reindex(range(24), fill_value=0)\n\n# Use the existing day_order list to ensure correct column order\npivot_table_pedestrian = pivot_table_pedestrian.reindex(columns=day_order, fill_value=0)\n\n\n# Plotting a heatmap for pedestrian fatalities\nplt.figure(figsize=(12, 8))\nsns.heatmap(pivot_table_pedestrian,\n            annot=True,\n            cmap='RdYlGn_r', # Using the same reversed Red-Yellow-Green colormap\n            fmt='g') # Format annotation as general number\nplt.title(f'Child Pedestrian Fatalities Count by Day of Week and Hour of Day ({earliest_year} - {latest_year})')\nplt.xlabel('Day of the Week')\nplt.ylabel('Hour of Day')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n2.4 Child Pedestrian Fatalities by Gender\n\n\nCode\npedestrian_gender_fatalities = pedestrian_children.dropna(subset=['Gender'])\n\n# Group data by Gender, counting all Crash ID occurrences\npedestrian_gender_count = pedestrian_gender_fatalities.groupby('Gender')['Crash ID'].count().reset_index(name='Fatalities')\n\n# Plotting a bar plot for Gender breakdown of pedestrian fatalities\nplt.figure(figsize=(8, 6))\nsns.barplot(x='Gender', y='Fatalities', data=pedestrian_gender_count, hue='Gender', palette=custom_palette, dodge=False, legend=False)\nplt.title(f'Child Pedestrian Fatalities by Gender ({earliest_year} - {latest_year})') \nplt.xlabel('Gender')\nplt.ylabel('Number of Fatalities')\nplt.tight_layout()\nplt.show()\n\n# Calculate and print the percentage\npedestrian_gender_count['Percentage'] = (pedestrian_gender_count['Fatalities'] / pedestrian_gender_count['Fatalities'].sum()) * 100\nprint(pedestrian_gender_count[['Gender', 'Percentage']])\n\n\n\n\n\n\n\n\n\n   Gender  Percentage\n0  Female   34.521385\n1    Male   65.478615"
  },
  {
    "objectID": "notebooks/1-vulnerable-road-users.html#child-cyclist-fatalities",
    "href": "notebooks/1-vulnerable-road-users.html#child-cyclist-fatalities",
    "title": "Sub Analysis of Vulnerable Road Users",
    "section": "3. Child Cyclist Fatalities",
    "text": "3. Child Cyclist Fatalities\n\n3.1 Child Cyclist Fatalities by Year\n\n\nCode\nfatalities_by_year_state = cyclist_children.groupby(['Year', 'State'])['Crash ID'].count().reset_index(name='Fatalities')\n\n# Create a DataFrame with all years in the desired range (DYNAMIC)\nall_years = pd.DataFrame({'Year': np.arange(earliest_year, latest_year + 1)})\n\n# Merge this with the fatalities_by_year_state DataFrame to include all years\nall_years_fatalities = pd.merge(all_years, fatalities_by_year_state, on='Year', how='left')\nall_years_fatalities['Fatalities'] = all_years_fatalities['Fatalities'].fillna(0)\n\n# Create a pivot table for the stacked bar chart\npivot_fatalities_state = pd.pivot_table(all_years_fatalities, index='Year', columns='State', values='Fatalities', fill_value=0)\n\n\n# Sort the index to make sure years are in order\npivot_fatalities_state = pivot_fatalities_state.sort_index()\n\nsns.set_style('whitegrid')\npivot_fatalities_state.plot(kind='bar', stacked=True, figsize=(12, 6), cmap='tab20')\nplt.title(f'Cyclist Fatalities of Children Under 16 by State ({earliest_year} - {latest_year})')\nplt.xlabel('Year')\nplt.ylabel('Number of Fatalities')\nplt.legend(title='State')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nThe above stacked bar chart shows the number of fatal cyclist incidents involving children under 16 across Australian states from 1989 to 2023. The graph shows a steady decline in fatalities for all states, with New South Wales having the highest number of fatalities, followed by Victoria and Queensland.\n\n\n3.2 Child Cyclist Fatalities by Month\n\n\nCode\nmonth_counts_cyc_df = cyclist_children.copy() # Use copy only if adding column modifies original view\n\n# Map the month numbers to month names\nmonth_counts_cyc_df['Month Name'] = month_counts_cyc_df['Month'].map(month_names)\n\n# Calculate the number of accidents by month\nmonth_counts = month_counts_cyc_df['Month Name'].value_counts().reset_index()\nmonth_counts.columns = ['Month', 'Fatalities']\n\nmonth_counts['Month'] = pd.Categorical(month_counts['Month'], categories=month_order, ordered=True)\nmonth_counts = month_counts.sort_values('Month')\n\n# Plotting a bar plot for monthly breakdown\nplt.figure(figsize=(12, 6))\nsns.barplot(x='Month', y='Fatalities', data=month_counts, dodge=False, legend=False)\nplt.title(f'Child Cyclist Fatalities by Month ({earliest_year} - {latest_year})') \nplt.xlabel('Month')\nplt.ylabel('Number of Fatalities')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n3.3 Child Cyclist Fatalities by Day of Week and Time of Day\n\n\nCode\nheatmap_df_cyc = cyclist_children[['Time', 'Dayweek']]\n\n# Dropping rows with missing values in 'Time'\nheatmap_df_cyc = heatmap_df_cyc.dropna(subset=['Time']).copy() # Add copy here\n\n# Extracting the hour from the time field\nheatmap_df_cyc['Hour'] = heatmap_df_cyc['Time'].str.split(':').str[0].astype(int)\n\n# Creating a pivot table to convert the data into wide format\npivot_table_cyc = pd.pivot_table(heatmap_df_cyc,\n                             values='Time',\n                             index=['Hour'],\n                             columns=['Dayweek'],\n                             aggfunc='count',\n                             fill_value=0)\n\n# Reindex for consistency\npivot_table_cyc = pivot_table_cyc.reindex(range(24), fill_value=0)\npivot_table_cyc = pivot_table_cyc.reindex(columns=day_order, fill_value=0)\n\n\n# Plotting a heatmap\nplt.figure(figsize=(12, 8))\nsns.heatmap(pivot_table_cyc, # Use reindexed table\n            annot=True,\n            cmap='RdYlGn_r', # Take a colour palette from https://loading.io/color/feature/RdYlGn-9/ and use _r to flip it so that red is higher and green is lower\n            fmt='g')\nplt.title(f'Child Cyclist Fatalities Count by Day of Week and Hour of Day ({earliest_year} - {latest_year})') \nplt.xlabel('Day of the Week')\nplt.ylabel('Hour of Day')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n3.4 Child Cyclist Fatalities by Gender\n\n\nCode\n# Filter for valid entries in 'Gender'\ngender_fatalities_cyc = cyclist_children.dropna(subset=['Gender']) # Changed variable name slightly for clarity\n\n# Group data by Gender, counting all Crash ID occurrences\ngender_count_cyc = gender_fatalities_cyc.groupby('Gender')['Crash ID'].count().reset_index(name='Fatalities')\n\n# Plotting a bar plot for Gender breakdown\nplt.figure(figsize=(8, 6))\nsns.barplot(x='Gender', y='Fatalities', data=gender_count_cyc, hue='Gender', palette=custom_palette, dodge=False, legend=False)\nplt.title(f'Child Cyclist Fatalities by Gender ({earliest_year} - {latest_year})') \nplt.xlabel('Gender')\nplt.ylabel('Number of Fatalities')\nplt.tight_layout()\nplt.show()\n\n# Calculate and print the percentage for consistency\ngender_count_cyc['Percentage'] = (gender_count_cyc['Fatalities'] / gender_count_cyc['Fatalities'].sum()) * 100\nprint(gender_count_cyc[['Gender', 'Percentage']])\n\n\n\n\n\n\n\n\n\n   Gender  Percentage\n0  Female   13.473054\n1    Male   86.526946"
  }
]